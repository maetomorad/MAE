%!PS-Adobe-3.1 EPSF-3.0%%Title: Wordmark.eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: ISU University Relations%%CreationDate: 3/14/05%%BoundingBox: 0 0 329 99%%HiResBoundingBox: 0 0 328.3233 98.7974%%CropBox: 0 0 328.3233 98.7974%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 40 8%%BeginData: 9156 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45A827FD0552277DFD09FFA85227A8FD10FFA82727FD22FFA852F827%F852FFFFA8FD2CFFA87D2720F827F8527DFD07FF7D27F820F8A8FD0EFF7D%27F82027FD21FF7D20F8A2FF7DF8272752FD2EFFA8F827F852FD09FFA827%27F827A8FD0EFFA82727F827FD21FF27F87DFFFFFFA8F82727FD2EFF7D27%F8F827FFFFFFCAFFFFFFCAFFFFA8F827F8A8CAFFFFFFCAFFFFFFCAFFFFFF%CAFFFF7DF82727FFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFFFFFCAFFFF7DF827A8FFCAFFFF52F852FFFFCAFFFFFFCAFFFFFF%CAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFFFFFA8F827F852FD0AFFA827F827A8FD0FFF7D27F827FD20FF4B%27F8A8FD05FF2727FD2EFF7D27F82027FD0AFFA8F827F8A8FD0FFF7DF827%27FD20FF27F8277DFD05FF4B27FD06FFA1A1FD13FFA87DFD11FFA8F827F8%52FD0AFFA827F827A8FD0FFF7D27F827FD20FF2727F852FD05FFA227FD06%FF2752FD13FF2752FD0FFFCAFF7DF8F82727FFCAFFFFFFCAFFFFFFCAA8F8%F8F8A8FFFFCAFFFFFFCAFFFFFFCAFFFFFFCA7DF8F827FFFFFFCAFFFFFFCA%FFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFA827F8F8F852A8%FFCAFFA852A8FFFFFFCA7DF852CAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCA%FF7DF852FFFFFFCAFFFFFFCAFFFFFFCAFD05FFA8F827F852FD08FFA8FFA8%27F827A8FD0FFF7D27F827FD20FF2727F827F82752FD09FF262752FD11FF%A827F87DFD0AFFA8FD06FF7D20F82752FD06FFA82720F852F820F8A8FD05%FFA82727F8277DFD04FF7DF82027FF7D27F852A8FD07FF5227F82727A8FD%0DFF52F820F827F820F852A8FD05FF2727F82727527DFD04FFA82727F827%7DFFFFFFA827F8202752277DFD04FF7D27F82727A8FD04FFA8F827F852FD%05FFA8F8277D7DF827F827A8FD04FF7DF8527D27F827A8FFFFFF7D27F827%5227F827F827A8FD04FFA82627277D2727F8A8FD0CFF7D27F827F827F827%F827A8FFFFFF5227F827F827F87DFFFFFF7DF8527D27F827A8FFFF7DF827%F827F82752FFFFFF7D2727A85227F8A8FFFFFF7D27F8F827FFFFFFCAFF27%F852FFFF52F827F8A8CAFFFF7DF852FFFF2727F87DCAFFFF7DF827F82752%52F8F8F87DFFFFCAFF27F8F8A8FFFFF827F8A8CAFFFFFFCAFFFFFFCAFFFF%FF5227F8F8F827F8F8F827FFFFCAFF52F8F852FFFFCAFFFF7DF852FFFF27%27F87DCAFFFF52F82752FFA8FFFFFF7D27F8A8CAFF27F820FFFFFFA8F827%F852FD04FF7D27F8A8FFFF7D27F827A8FFFFFFF8277DFFFF52F8277DFFFF%FF7D27F827A8FFFF27F82752FFFFFF7627F852FFFFFF52F82752FD0DFF52%27F827F827F827F87DFFFFFF7DF82752FD05FFF8277DFFFF52F8277DFFFF%FF5227F87DFD05FF52F827FFFFFF7DF8277DFFFF7D27F82027FD04FF52F8%27A8FFFFA8F827F8A8FFFF5220F852FFFF2727F87DFFFFFF7DF82727FFFF%FF2720F852FFFFFF27F82052FFFFFF5227F827A8FD0DFF7D27F827F820F8%2727FFFFFF5220F877FD04FF5220F852FFFF2727F87DFFFFFF52F82752FD%04FFA8F82727FFFFFF5220F852FFFFA8F827F852FD04FFF82727FFFFFFA8%27F827A8FFFF7DF82752FFFF52F8277DFFFFFF7D27F827FFFFFF52F82752%FFFFFFF827F87DFFFFFFA8F827F8A8FD0FFFA82727F827F827FFFFFF7DF8%2752FD04FF76F82752FFFF52F8277DFFFFFF5227F87DFD04FF7D27F8FD05%27F82727CAFF7DF8F82727FFCAFFA820F827A8FFCAA8F8F8F8A8FFFF7D27%27FFA827F8F8F87DFFFFCA7DF8F827FFFFFF2727F852CAFF7DF8F8277DFF%CAFF7DF8F8277DFFCAFFFFFFCAFFFFFFCA777DFFCAFFFFFF2727F8F8F8FF%FFFF5227F852CAFFFFFF7D2727FFA827F8F8F87DFFFFCA52F8F852FFFFFF%CA52F8F8F8FD06527DFFFFA8F827F852FFFFFFA8F82720FFFFFFA827F827%A8FFFFFFA8FF52275252F8277DFFFFFF7D27F827FFFFFF52F82752FFFFA8%F827F8A8FFFFFFA8F827F8A8FD0AFF2752FD06FF2727F827FFFFFF7DF827%52FD05FFA8FF52275252F8277DFFFFFF5227F87DFD04FF5227F852FD09FF%7D20F82752FFFFFF7D20F827A8FFFFA8F820F8A8FD04FF27207DFF5220F8%7DFFFFFF7DF82027FFFFFF2727F852FFFFA220F8277DFFFFFF7D20F8277D%FD0AFF52F8FD06FF7DF820F8FFFFFF5227F852FD06FF27207DFF5220F87D%FFFFFF77F82052FD04FF7DF82027FD09FFA8F827F852FFFFFFA8F827F8A8%FFFFA827F827A8FFFFFF272752FFFF52F8277DFFFFFF7D27F827FFFFFF52%F82752FFFFFF2027F87DFFFFFFA8F827F8A8FD0AFF272752FD05FF7D27F8%52FFFFFF7DF82752FD05FF272752FFFF52F8277DFFFFFF5227F87DFD04FF%7D27F827A8FD05FF52FFFF7D27F8F827FFFFFFA827F8F852FFFFA8F827F8%A8CAFF7DF8F8A8FFFF2727F87DCAFFFF7DF82727FFCAFF27F8F852FFFFCA%27F8F852FFFFFF5227F827CAFFFFFFCAFFFFFFCAFFFF27F827FFFFCAFFFF%A8F82752FFCAFF52F8F852FFFFCAFF7DF8F8A8FFFF2727F87DCAFFFF52F8%2752FFCAFFFFA8F827F852CAFFFFFF2727FFFFA8F827F852FD04FF2727F8%27FFFF7D27F827A8FFFF7DF8277DFFA827F8277DFFFFFF7D27F827FFFFFF%52F82752FFFFFF7D27F852FFFFFF52F82752FD0BFF2727F87DFD04FF7D27%F8FD04FF7DF82752FD04FF7DF8277DFFA827F8277DFFFFFF5227F87DFD05%FF52F827F8527DA827277DFFFF5227F82027FD04FF7DF820F8275227F827%F827A8FF5220F8272727F827F85252A8FF7DF82727FFFFFF2720F852FD04%FF2720F8A8FFA8F82727FD0CFF27F827F87DFFFFFF27F87DFD04FF5220F8%52FFA852FF5220F8272727F827F85252A8FF7DF82727FFA852FFFF7D27F8%20F827F82027FFA82727F827F827F87DFFFFFF52F827F8272727F82752A8%FFA8F827F827777DF827F852FF7DF827F82727FF2727F827F852FD04FF27%27F852272727FD0DFF527D2727F8527D52F852FD05FFA8F827F827277DFF%A8F827F8277D7DF827F852FFFFA827F82727277DFFFFFF7D27F827F82727%FFFFA87D527D527D52527DFFFFFFA85227277DFF277DCAFFFFFFCA7D2752%7DFFFF52277DFFFF7D7D527D527DA87D527D527D7DFFFFFFCAFF52272727%52FFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFF7D52F827277DFFFFCAFFFFFF%CA7D272727A8FFFFCA7D27527DFFFF52277DFFFFCAFF7D27F8277DFFCAFF%FFFF7D52272752FD83FFFD80A8FD8052FFFFCAFFFFFFCAFFFFFFCAFFFFFF%CAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFF%CAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF7D27522752FF%FF5227277DFD04FF7D2727527DFFFFA8275227FD05FF525227527DFD04FF%522752277DFFFF275227FD04FFA827522752272752FD06FF522752275252%A8FD08FFA8522752527DFD06FF27522752A8FD04FF7D2752275227522752%FD05FF5227522752FFA8275227A827F8277DFFFFA827267DFD05FF2720F8%27A8FFA852F87DFD05FF7DF82027FD05FF7D27F827A8FFFF7DF852FD04FF%A852F8277D7D27207DFD05FF7D27F8527D27F87DFD06FFA82727A8272727%FD05FFA87DF82052FD05FF52205252F8275227F8FD05FF7D27F82052FFFF%27F87DFF522752FD04FF5227FD06FFA82727F827FFFF7D27FD07FF52F87D%FD06FF522727FFFFFF5252FD06FF7D2727FFFFA82752FD06FF27277DFF7D%27F8FD06FF7DF87DFFFF2752FD06FFA827F8FD06FF4C52FF7D2727FFA827%7DFD05FFA827F852FFA8F8A8FFCA52F852CAFFFFFF2752FFFFCAFFFFFF7D%5252F8F852FF7DF8FFFFFFCAFFFFFF272752FFCAFFFFFFCAA8F8F852FFFF%2752FFFFFFCAFFFF7DF827FFFF277D7DFFCAFFFFFFCA52F87DCA7DF820A8%FFFFFFCAFF52F8F852A87D27FFFFFFCAFFFFA8F827A8FFCAFFFFFF52FFFF%7DF827A8FF7DA8FFFFCAFFFFFF5227F87D2752FFFFFF522752FD04FF5227%FD06FF7D27FF2727F87D7D27FD07FF52F87DFD07FF52F852FFA826FD07FF%5227277D2727A8FD07FF2727277D272752FD07FFF827F82752FD07FFA827%F8A8FD08FF522727FD0BFF2727F852FD04FF52F852FD04FF5252FD06FF7D%52FFFFF827F85227FD07FF272752FD07FF7D20F8A82752FD07FF7DF82727%27F8A8FD07FF52F827F82727FD08FFA82027F82027FD06FFA8F827A8FD08%FF7DF827FD0BFF7DF8207DFD04FF522752FD04FF5227FD06FF7D27FFFFA8%F827F827FD07FF52F87DFD08FFFD0427A8FD07FF7D2727FFA827A8FD07FF%27277D7DF827A8FD06FFA8A8FF7627F827A8FD05FFA827F8A8FD08FF7D27%27FD0BFFA827F8A8FD04FF52F852FFFFCAFF2752CAFFFFFFCAFF7D27CAFF%FF7DF82727FFCAFFFFFFCAFF27F852FFFFFFCAFFFFFFCA7DF8F827FFFFFF%CAFFFFFFCA7DF827CAFF527D27FFFFFFCAFFFF27F87DFF27F852FFFFCAFF%FFFF5227FFFFA827F87DCAFFFFFFCAA8F8F8A1FFFFFFCAFFFFFFCA7DF827%A8FFFFFFCAFFFFFFCAFFFFA8F827A8FFCAFFFF7D27F8A8FFFFA8277DFD06%FF7D27FD04FF52F827FD07FF52F87DFD08FFA827F87DFD08FF7D2727FFFF%FFF852FD06FF27277DFF5227F8FD06FF7DF87DFFFF2727A8FD05FFA827F8%FD09FF7D2727FD0BFFA827F8FD06FF5227F827272752FD06FFA8F82027FF%FFFFCA27F8FD05FFA852F820F8A2FD08FF2720CAFD07FF7D27F8272752F8%2052FD05FF5226F8277DFFF82727A8FD04FF5227F852272752FD05FFA852%F82027A8FD06FF7D27F82027FD09FFA827F82727A8FD05FF7D7D52527DFD%07FFA87D7D7DFD04FFA87DFD06FF7DA87D7DA8FD08FFA87DFD08FFA87DA8%7D7D7DA17DFD06FFA87DA87DA8FFA87D7DA8FD04FFA87D7D52527DFD07FF%7DA87D7DA8FD06FFA87DA87D7DFD0AFF7DA87D7DA8FFFFCAFFFFFFCAFFFF%FFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFA8%FFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFF%FFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCA%FFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFF%FF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: Wordmark.eps 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2004-10-25T17:17:37Z</xap:CreateDate>
  <xap:ModifyDate>2005-03-14T21:12:48Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>80</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAUAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8APP8AnJXyZdaDo0/nTR/M&#xA;OrW91c30aXVj9bf6sFmVv7lF4lKMo2qRgS8s/JK01/z356i0PVPMurwWK28tzMbe8lWRhHQBVZi4&#xA;FWYV26Yq+0dF0qHSNJtNMhmmuIrOJYUmuXMszhRTlI5+0x7nCqNxV8p/85J+cPze0DXm0ybW1tvL&#xA;2qCWTTYdO/cyGBW4lJ5Aqy8qMOVG4nAr1L/nF1mb8oNPZiWZrm7JJ3JJmbFXrWFXYq7FXyN/zkZ5&#xA;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</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -98.7974 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 98.7974 li328.324 98.7974 li328.324 0 liclp[1 0 0 1 0 0 ] concat1.63575 74.0943 mo1.63575 73.3326 li11.2696 73.3326 li11.2696 74.0943 li11.1548 74.0943 11.0689 74.0943 10.9556 74.0943 cv8.8462 74.0943 8.39063 74.4605 8.39063 76.4166 cv8.39063 87.7681 li8.39063 93.8091 10.4141 96.6255 15.0884 96.6255 cv17.3394 96.6255 19.2203 95.9624 20.3887 95.0015 cv22.441 93.3423 22.7549 91.481 22.7549 88.1656 cv22.7549 78.8785 li22.7549 75.6246 22.127 74.1929 19.7334 74.0943 cv19.7334 73.3326 li26.6299 73.3326 li26.6299 74.0943 li24.4356 74.4605 23.8096 75.7847 23.8096 78.8785 cv23.8096 88.1998 li23.8096 95.0318 20.9307 97.9214 13.834 97.9214 cv10.3282 97.9214 7.84864 97.023 6.19581 95.0318 cv4.48584 92.941 4.28663 90.5562 4.28663 87.3042 cv4.28663 76.4166 li4.28663 74.4273 3.80225 74.0943 1.63575 74.0943 cvfalse sop/0 [/DeviceCMYK] add_csa0 0 0 1 cmykf1.7503 lw0 lc0 lj4 ml[] 0 dshtrue sadj1.63575 74.0943 mo1.63575 73.3326 li11.2696 73.3326 li11.2696 74.0943 li11.1548 74.0943 11.0689 74.0943 10.9556 74.0943 cv8.8462 74.0943 8.39063 74.4605 8.39063 76.4166 cv8.39063 87.7681 li8.39063 93.8091 10.4141 96.6255 15.0884 96.6255 cv17.3394 96.6255 19.2203 95.9624 20.3887 95.0015 cv22.441 93.3423 22.7549 91.481 22.7549 88.1656 cv22.7549 78.8785 li22.7549 75.6246 22.127 74.1929 19.7334 74.0943 cv19.7334 73.3326 li26.6299 73.3326 li26.6299 74.0943 li24.4356 74.4605 23.8096 75.7847 23.8096 78.8785 cv23.8096 88.1998 li23.8096 95.0318 20.9307 97.9214 13.834 97.9214 cv10.3282 97.9214 7.84864 97.023 6.19581 95.0318 cv4.48584 92.941 4.28663 90.5562 4.28663 87.3042 cv4.28663 76.4166 li4.28663 74.4273 3.80225 74.0943 1.63575 74.0943 cvcp@44.6993 91.9175 mo44.6993 95.1666 45.355 96.5953 47.7496 96.6939 cv47.7496 97.4576 li40.8238 97.4576 li40.8238 96.6939 li43.0181 96.3316 43.6451 95.0015 43.6451 91.9175 cv43.6451 76.6832 li43.6451 74.5279 43.3882 74.1304 41.1368 74.1304 cv41.0235 74.1304 40.938 74.1304 40.8238 74.1304 cv40.8238 73.3326 li48.6905 73.3326 li61.8565 90.5562 li61.8565 78.8785 li61.8565 75.6246 61.2017 74.1929 58.8077 74.0943 cv58.8077 73.3326 li65.7334 73.3326 li65.7334 74.0943 li63.5386 74.4605 62.9112 75.7847 62.9112 78.8785 cv62.9112 97.9214 li61.7139 97.9214 li44.6993 75.688 li44.6993 91.9175 lif44.6993 91.9175 mo44.6993 95.1666 45.355 96.5953 47.7496 96.6939 cv47.7496 97.4576 li40.8238 97.4576 li40.8238 96.6939 li43.0181 96.3316 43.6451 95.0015 43.6451 91.9175 cv43.6451 76.6832 li43.6451 74.5279 43.3882 74.1304 41.1368 74.1304 cv41.0235 74.1304 40.938 74.1304 40.8238 74.1304 cv40.8238 73.3326 li48.6905 73.3326 li61.8565 90.5562 li61.8565 78.8785 li61.8565 75.6246 61.2017 74.1929 58.8077 74.0943 cv58.8077 73.3326 li65.7334 73.3326 li65.7334 74.0943 li63.5386 74.4605 62.9112 75.7847 62.9112 78.8785 cv62.9112 97.9214 li61.7139 97.9214 li44.6993 75.688 li44.6993 91.9175 licp@90.3858 74.0943 mo90.2725 74.0943 90.1856 74.0943 90.0713 74.0943 cv87.9624 74.0943 87.4791 74.4605 87.4791 76.4166 cv87.4791 94.3726 li87.4791 96.3316 87.9624 96.6939 90.0713 96.6939 cv90.1856 96.6939 90.2725 96.6939 90.3858 96.6939 cv90.3858 97.4576 li80.4668 97.4576 li80.4668 96.6939 li80.5811 96.6939 80.6666 96.6939 80.7808 96.6939 cv82.8907 96.6939 83.375 96.3316 83.375 94.3726 cv83.375 76.4166 li83.375 74.4273 82.919 74.0943 80.752 74.0943 cv80.752 73.3326 li90.3858 73.3326 li90.3858 74.0943 lif90.3858 74.0943 mo90.2725 74.0943 90.1856 74.0943 90.0713 74.0943 cv87.9624 74.0943 87.4791 74.4605 87.4791 76.4166 cv87.4791 94.3726 li87.4791 96.3316 87.9624 96.6939 90.0713 96.6939 cv90.1856 96.6939 90.2725 96.6939 90.3858 96.6939 cv90.3858 97.4576 li80.4668 97.4576 li80.4668 96.6939 li80.5811 96.6939 80.6666 96.6939 80.7808 96.6939 cv82.8907 96.6939 83.375 96.3316 83.375 94.3726 cv83.375 76.4166 li83.375 74.4273 82.919 74.0943 80.752 74.0943 cv80.752 73.3326 li90.3858 73.3326 li90.3858 74.0943 licp@123.645 75.7242 mo123.645 74.8267 122.818 74.1626 121.336 74.0943 cv121.336 73.3326 li127.92 73.3326 li127.92 74.0943 li125.526 74.5943 124.957 76.0201 124.073 78.2085 cv116.15 97.9214 li115.409 97.9214 li107.628 78.6744 li106.431 75.7242 105.775 74.0943 103.838 74.0943 cv103.723 74.0943 103.61 74.0943 103.496 74.0943 cv103.496 73.3326 li113.442 73.3326 li113.442 74.0943 li111.789 74.2632 110.991 74.5279 110.991 75.1587 cv110.991 75.5855 111.219 76.3863 111.676 77.5464 cv117.403 91.98 li123.132 77.8775 li123.417 77.1802 123.645 76.5513 123.645 75.7242 cvf123.645 75.7242 mo123.645 74.8267 122.818 74.1626 121.336 74.0943 cv121.336 73.3326 li127.92 73.3326 li127.92 74.0943 li125.526 74.5943 124.957 76.0201 124.073 78.2085 cv116.15 97.9214 li115.409 97.9214 li107.628 78.6744 li106.431 75.7242 105.775 74.0943 103.838 74.0943 cv103.723 74.0943 103.61 74.0943 103.496 74.0943 cv103.496 73.3326 li113.442 73.3326 li113.442 74.0943 li111.789 74.2632 110.991 74.5279 110.991 75.1587 cv110.991 75.5855 111.219 76.3863 111.676 77.5464 cv117.403 91.98 li123.132 77.8775 li123.417 77.1802 123.645 76.5513 123.645 75.7242 cvcp@140.831 96.6939 mo142.997 96.6939 143.481 96.3619 143.481 94.3726 cv143.481 76.4166 li143.481 74.4273 142.997 74.0943 140.831 74.0943 cv140.831 73.3326 li157.789 73.3326 li160.069 79.7691 li159.441 79.7691 li157.988 77.8111 156.847 76.4859 156.021 75.7847 cv155.309 75.191 154.597 74.6949 153.798 74.3931 cv153.256 74.1929 152.374 74.0943 151.12 74.0943 cv148.64 74.0943 li147.643 74.0943 147.557 74.2632 147.557 74.9566 cv147.557 75.1587 147.557 75.3902 147.557 75.6558 cv147.557 84.5826 li149.495 84.5826 li152.914 84.5826 154.739 83.1529 155.28 79.7691 cv155.878 79.7691 li155.878 90.9205 li155.28 90.9205 li155.052 87.2027 153.172 85.4439 149.495 85.4439 cv147.557 85.4439 li147.557 94.3033 li147.557 96.5591 147.557 96.6939 149.495 96.6939 cv151.633 96.6939 li155.423 96.6939 157.674 94.8687 159.869 90.356 cv160.496 90.4195 li158.843 97.4576 li140.831 97.4576 li140.831 96.6939 lif140.831 96.6939 mo142.997 96.6939 143.481 96.3619 143.481 94.3726 cv143.481 76.4166 li143.481 74.4273 142.997 74.0943 140.831 74.0943 cv140.831 73.3326 li157.789 73.3326 li160.069 79.7691 li159.441 79.7691 li157.988 77.8111 156.847 76.4859 156.021 75.7847 cv155.309 75.191 154.597 74.6949 153.798 74.3931 cv153.256 74.1929 152.374 74.0943 151.12 74.0943 cv148.64 74.0943 li147.643 74.0943 147.557 74.2632 147.557 74.9566 cv147.557 75.1587 147.557 75.3902 147.557 75.6558 cv147.557 84.5826 li149.495 84.5826 li152.914 84.5826 154.739 83.1529 155.28 79.7691 cv155.878 79.7691 li155.878 90.9205 li155.28 90.9205 li155.052 87.2027 153.172 85.4439 149.495 85.4439 cv147.557 85.4439 li147.557 94.3033 li147.557 96.5591 147.557 96.6939 149.495 96.6939 cv151.633 96.6939 li155.423 96.6939 157.674 94.8687 159.869 90.356 cv160.496 90.4195 li158.843 97.4576 li140.831 97.4576 li140.831 96.6939 licp@175.429 96.6939 mo175.543 96.6939 175.63 96.6939 175.743 96.6939 cv177.853 96.6939 178.337 96.3316 178.337 94.3726 cv178.337 76.4166 li178.337 74.4273 177.853 74.0943 175.688 74.0943 cv175.688 73.3326 li185.149 73.3326 li190.876 73.3326 194.126 75.9878 194.126 79.9039 cv194.126 82.856 192.472 84.6158 189.168 85.2789 cv190.622 86.3414 191.218 87.6998 191.846 88.9947 cv193.441 92.3472 li194.724 95.1011 195.378 96.6587 197.403 96.6587 cv197.518 96.6587 197.631 96.6255 197.774 96.6255 cv197.774 97.4576 li191.106 97.4576 li188.113 90.4878 li186.716 87.272 185.974 85.6431 183.552 85.6431 cv182.413 85.6431 li182.413 94.3726 li182.413 96.3316 182.898 96.6939 185.005 96.6939 cv185.12 96.6939 185.206 96.6939 185.32 96.6939 cv185.32 97.4576 li175.429 97.4576 li175.429 96.6939 licp182.413 84.6158 mo184.265 84.6158 li187.999 84.6158 189.907 82.7242 189.907 79.2388 cv189.907 76.1187 187.971 74.1304 184.607 74.1304 cv182.754 74.1304 182.413 74.4273 182.413 76.5162 cv182.413 84.6158 lif175.429 96.6939 mo175.543 96.6939 175.63 96.6939 175.743 96.6939 cv177.853 96.6939 178.337 96.3316 178.337 94.3726 cv178.337 76.4166 li178.337 74.4273 177.853 74.0943 175.688 74.0943 cv175.688 73.3326 li185.149 73.3326 li190.876 73.3326 194.126 75.9878 194.126 79.9039 cv194.126 82.856 192.472 84.6158 189.168 85.2789 cv190.622 86.3414 191.218 87.6998 191.846 88.9947 cv193.441 92.3472 li194.724 95.1011 195.378 96.6587 197.403 96.6587 cv197.518 96.6587 197.631 96.6255 197.774 96.6255 cv197.774 97.4576 li191.106 97.4576 li188.113 90.4878 li186.716 87.272 185.974 85.6431 183.552 85.6431 cv182.413 85.6431 li182.413 94.3726 li182.413 96.3316 182.898 96.6939 185.005 96.6939 cv185.12 96.6939 185.206 96.6939 185.32 96.6939 cv185.32 97.4576 li175.429 97.4576 li175.429 96.6939 licp182.413 84.6158 mo184.265 84.6158 li187.999 84.6158 189.907 82.7242 189.907 79.2388 cv189.907 76.1187 187.971 74.1304 184.607 74.1304 cv182.754 74.1304 182.413 74.4273 182.413 76.5162 cv182.413 84.6158 licp@213.391 89.2281 mo215.128 94.5376 217.211 97.023 220.573 97.023 cv223.168 97.023 224.764 95.3316 224.764 92.7798 cv224.764 90.024 222.884 88.7632 219.177 87.1714 cv214.931 85.3453 212.793 83.4175 212.793 79.6373 cv212.793 75.6558 215.214 73.0347 219.207 73.0347 cv222.226 73.0347 223.851 74.1626 224.309 74.1626 cv224.707 74.1626 225.249 73.7964 225.959 73.0982 cv226.473 73.0982 li226.473 81.231 li225.904 81.231 li224.42 76.3863 222.056 73.897 219.12 73.897 cv217.069 73.897 215.643 75.3902 215.643 77.2798 cv215.643 79.7691 217.439 80.7984 220.63 82.19 cv222.769 83.1207 224.42 83.8843 225.447 84.8492 cv227.186 86.4732 228.013 88.2632 228.013 90.6851 cv228.013 95.1343 225.134 97.9214 220.118 97.9214 cv217.154 97.9214 215.474 96.7623 214.988 96.7623 cv214.587 96.7623 214.048 97.1236 213.334 97.8238 cv212.823 97.8238 li212.823 89.2281 li213.391 89.2281 lif213.391 89.2281 mo215.128 94.5376 217.211 97.023 220.573 97.023 cv223.168 97.023 224.764 95.3316 224.764 92.7798 cv224.764 90.024 222.884 88.7632 219.177 87.1714 cv214.931 85.3453 212.793 83.4175 212.793 79.6373 cv212.793 75.6558 215.214 73.0347 219.207 73.0347 cv222.226 73.0347 223.851 74.1626 224.309 74.1626 cv224.707 74.1626 225.249 73.7964 225.959 73.0982 cv226.473 73.0982 li226.473 81.231 li225.904 81.231 li224.42 76.3863 222.056 73.897 219.12 73.897 cv217.069 73.897 215.643 75.3902 215.643 77.2798 cv215.643 79.7691 217.439 80.7984 220.63 82.19 cv222.769 83.1207 224.42 83.8843 225.447 84.8492 cv227.186 86.4732 228.013 88.2632 228.013 90.6851 cv228.013 95.1343 225.134 97.9214 220.118 97.9214 cv217.154 97.9214 215.474 96.7623 214.988 96.7623 cv214.587 96.7623 214.048 97.1236 213.334 97.8238 cv212.823 97.8238 li212.823 89.2281 li213.391 89.2281 licp@253.719 74.0943 mo253.606 74.0943 253.52 74.0943 253.406 74.0943 cv251.296 74.0943 250.812 74.4605 250.812 76.4166 cv250.812 94.3726 li250.812 96.3316 251.296 96.6939 253.406 96.6939 cv253.52 96.6939 253.606 96.6939 253.719 96.6939 cv253.719 97.4576 li243.8 97.4576 li243.8 96.6939 li243.915 96.6939 244.001 96.6939 244.115 96.6939 cv246.225 96.6939 246.708 96.3316 246.708 94.3726 cv246.708 76.4166 li246.708 74.4273 246.252 74.0943 244.086 74.0943 cv244.086 73.3326 li253.719 73.3326 li253.719 74.0943 lif253.719 74.0943 mo253.606 74.0943 253.52 74.0943 253.406 74.0943 cv251.296 74.0943 250.812 74.4605 250.812 76.4166 cv250.812 94.3726 li250.812 96.3316 251.296 96.6939 253.406 96.6939 cv253.52 96.6939 253.606 96.6939 253.719 96.6939 cv253.719 97.4576 li243.8 97.4576 li243.8 96.6939 li243.915 96.6939 244.001 96.6939 244.115 96.6939 cv246.225 96.6939 246.708 96.3316 246.708 94.3726 cv246.708 76.4166 li246.708 74.4273 246.252 74.0943 244.086 74.0943 cv244.086 73.3326 li253.719 73.3326 li253.719 74.0943 licp@286.352 73.3326 mo286.78 73.3326 287.15 73.3023 287.521 72.8658 cv288.576 72.8658 li289.744 79.8677 li289.259 80.1031 li287.35 76.0865 285.097 74.0943 282.534 74.0943 cv281.022 74.0943 280.992 74.5601 280.992 76.2886 cv280.992 94.3404 li280.992 96.3316 281.507 96.6939 283.558 96.6939 cv283.673 96.6939 283.759 96.6939 283.871 96.6939 cv283.871 97.4576 li273.983 97.4576 li273.983 96.6939 li274.096 96.6939 274.182 96.6939 274.296 96.6939 cv276.349 96.6939 276.889 96.3316 276.889 94.3404 cv276.889 76.2886 li276.889 74.5601 276.833 74.0943 275.322 74.0943 cv272.757 74.0943 270.534 76.0865 268.625 80.1031 cv268.113 79.8677 li269.309 72.8658 li270.334 72.8658 li270.705 73.3023 271.078 73.3326 271.533 73.3326 cv271.618 73.3326 271.674 73.3326 271.731 73.3326 cv286.152 73.3326 li286.208 73.3326 286.267 73.3326 286.352 73.3326 cvf286.352 73.3326 mo286.78 73.3326 287.15 73.3023 287.521 72.8658 cv288.576 72.8658 li289.744 79.8677 li289.259 80.1031 li287.35 76.0865 285.097 74.0943 282.534 74.0943 cv281.022 74.0943 280.992 74.5601 280.992 76.2886 cv280.992 94.3404 li280.992 96.3316 281.507 96.6939 283.558 96.6939 cv283.673 96.6939 283.759 96.6939 283.871 96.6939 cv283.871 97.4576 li273.983 97.4576 li273.983 96.6939 li274.096 96.6939 274.182 96.6939 274.296 96.6939 cv276.349 96.6939 276.889 96.3316 276.889 94.3404 cv276.889 76.2886 li276.889 74.5601 276.833 74.0943 275.322 74.0943 cv272.757 74.0943 270.534 76.0865 268.625 80.1031 cv268.113 79.8677 li269.309 72.8658 li270.334 72.8658 li270.705 73.3023 271.078 73.3326 271.533 73.3326 cv271.618 73.3326 271.674 73.3326 271.731 73.3326 cv286.152 73.3326 li286.208 73.3326 286.267 73.3326 286.352 73.3326 cvcp@320.208 96.6939 mo320.324 96.6939 320.41 96.6939 320.524 96.6939 cv320.524 97.4576 li310.604 97.4576 li310.604 96.6939 li310.719 96.6939 310.805 96.6939 310.918 96.6939 cv313.026 96.6939 313.514 96.3316 313.514 94.3726 cv313.514 86.3062 li307.042 75.7847 li306.273 74.5279 305.674 74.064 304.192 74.064 cv303.993 74.064 303.766 74.0943 303.539 74.0943 cv303.539 73.3326 li314.309 73.3326 li314.309 74.0943 li312.744 74.0943 311.946 74.4273 311.946 75.0591 cv311.946 75.6246 312.259 76.1187 312.713 76.816 cv317.303 84.1177 li322.063 76.983 li322.547 76.2515 322.833 75.688 322.833 75.2584 cv322.833 74.6578 322.148 74.23 320.781 74.0943 cv320.781 73.3326 li327.449 73.3326 li327.449 74.0943 li324.969 74.2955 324.058 75.7544 322.804 77.6441 cv317.618 85.4761 li317.618 94.3726 li317.618 96.3316 318.101 96.6939 320.208 96.6939 cvf320.208 96.6939 mo320.324 96.6939 320.41 96.6939 320.524 96.6939 cv320.524 97.4576 li310.604 97.4576 li310.604 96.6939 li310.719 96.6939 310.805 96.6939 310.918 96.6939 cv313.026 96.6939 313.514 96.3316 313.514 94.3726 cv313.514 86.3062 li307.042 75.7847 li306.273 74.5279 305.674 74.064 304.192 74.064 cv303.993 74.064 303.766 74.0943 303.539 74.0943 cv303.539 73.3326 li314.309 73.3326 li314.309 74.0943 li312.744 74.0943 311.946 74.4273 311.946 75.0591 cv311.946 75.6246 312.259 76.1187 312.713 76.816 cv317.303 84.1177 li322.063 76.983 li322.547 76.2515 322.833 75.688 322.833 75.2584 cv322.833 74.6578 322.148 74.23 320.781 74.0943 cv320.781 73.3326 li327.449 73.3326 li327.449 74.0943 li324.969 74.2955 324.058 75.7544 322.804 77.6441 cv317.618 85.4761 li317.618 94.3726 li317.618 96.3316 318.101 96.6939 320.208 96.6939 cvcp@21.9971 3.12305 mo20.7764 3.28663 li17.8145 3.5337 16.7696 4.27393 16.7696 7.56055 cv16.7696 53.0103 li16.7696 56.2984 17.8145 57.0376 20.7764 57.2837 cv21.9971 57.3668 li21.9971 59.7486 li1.95557 59.7486 li1.95557 57.3668 li3.17627 57.2837 li6.13916 57.0376 7.18409 56.2984 7.18409 53.0103 cv7.18409 7.56055 li7.18409 4.27393 6.13916 3.5337 3.17627 3.28663 cv1.95557 3.12305 li1.95557 1.14991 li21.9971 1.14991 li21.9971 3.12305 lif37.7979 60.983 mo31.9888 60.983 27.8062 54.4918 27.8062 43.9703 cv27.8062 31.6421 33.6734 23.2588 40.7027 23.2588 cv42.4454 23.2588 44.188 24.1626 46.0479 25.8882 cv46.0479 8.87647 li46.0479 7.39698 46.0479 7.06788 45.0015 6.57471 cv42.6783 5.42383 li42.6783 3.69776 li45.8731 3.2046 49.1846 1.89014 52.96 0 cv53.9483 0 li53.9483 52.023 li53.9483 53.4205 53.9483 53.8326 54.9356 54.3267 cv57.0269 55.4761 li57.0269 57.2017 li54.1216 57.6138 50.8692 58.8482 47.0347 60.899 cv46.2212 60.899 li46.0479 56.1343 li43.4332 59.3404 40.7608 60.983 37.7979 60.983 cvcp46.0479 34.0259 mo45.6416 29.0943 43.4332 25.8882 40.8775 25.8882 cv37.566 25.8882 35.8233 30.1626 35.8233 38.546 cv35.8233 49.5582 37.9141 55.314 41.8067 55.314 cv43.375 55.314 45.0015 54.3267 46.0479 52.6832 cv46.0479 34.0259 lif68.587 60.899 mo65.3916 60.899 62.9522 57.7769 62.9522 53.3404 cv62.9522 47.9146 66.4376 44.7925 73.3497 40.8472 cv77.9976 38.1348 li77.9976 30.7393 li77.9976 27.6153 77.126 26.0533 75.3834 26.0533 cv72.7686 26.0533 70.0972 28.272 70.0972 31.231 cv70.0972 32.2168 70.3873 33.4502 70.3873 34.9297 cv70.3873 38.6285 68.7032 41.3404 66.3218 41.3404 cv64.1724 41.3404 62.8946 39.6138 62.8946 36.6553 cv62.8946 34.19 64.1138 31.6421 66.4952 29.0943 cv70.0972 25.2315 73.8731 23.3404 77.9395 23.3404 cv84.5611 23.3404 85.607 26.875 85.607 34.9297 cv85.607 53.4205 li85.607 55.314 85.7818 56.2173 86.7686 56.2173 cv87.6402 56.2173 88.5699 55.6412 89.6148 54.4918 cv90.1382 56.3814 li87.7569 59.0933 85.2584 60.4908 82.8184 60.4908 cv79.8565 60.4908 78.3462 58.7642 78.23 55.23 cv74.2217 58.7642 71.2007 60.899 68.587 60.899 cvcp77.9976 40.8472 mo75.3252 42.3267 li71.6075 44.3804 69.6324 47.2574 69.6324 50.4634 cv69.6324 53.2574 70.8516 54.9859 72.6534 54.9859 cv74.3379 54.9859 76.1382 54.0796 77.9976 52.107 cv77.9976 40.8472 lif93.6246 57.2837 mo94.6114 57.2017 li96.2378 57.0376 96.7032 56.0523 96.7032 53.5874 cv96.7032 8.87647 li96.7032 7.47901 96.7032 7.06788 95.7149 6.57471 cv93.6246 5.42383 li93.6246 3.69776 li96.9351 3.28663 100.188 1.80811 103.615 0 cv104.604 0 li104.604 29.2588 li107.565 25.3956 110.587 23.5054 113.724 23.5054 cv116.628 23.5054 119.184 25.0669 120.52 27.3687 cv121.74 29.4229 121.856 31.7242 121.856 34.6827 cv121.856 35.3409 121.856 36.0801 121.856 36.8199 cv121.856 53.5874 li121.856 56.0523 122.321 57.0376 123.948 57.2017 cv124.936 57.2837 li124.936 59.7486 li110.587 59.7486 li110.587 57.2837 li111.632 57.2017 li113.258 57.0376 113.724 56.0523 113.724 53.5874 cv113.724 34.8477 li113.724 30.8199 112.969 29.0943 110.006 29.0943 cv107.856 29.0943 105.881 30.4087 104.604 32.546 cv104.604 53.5874 li104.604 56.0523 105.011 57.0376 106.637 57.2017 cv107.683 57.2837 li107.683 59.7486 li93.6246 59.7486 li93.6246 57.2837 lif145.093 23.2588 mo153.689 23.2588 159.674 31.0669 159.674 42.0796 cv159.674 53.0943 153.689 60.899 145.093 60.899 cv136.553 60.899 130.454 53.1753 130.454 42.0796 cv130.454 31.0669 136.496 23.2588 145.093 23.2588 cvcp151.077 42.0796 mo151.077 31.7242 148.811 26.2999 145.093 26.2999 cv141.259 26.2999 139.109 31.6421 139.109 42.0796 cv139.109 52.4351 141.374 57.8609 145.093 57.8609 cv148.927 57.8609 151.077 52.5181 151.077 42.0796 cvf188.485 39.1207 mo190.055 39.1207 li194.121 51.8609 198.883 58.2691 203.822 58.2691 cv207.539 58.2691 210.038 54.6539 210.038 48.9839 cv210.038 40.6006 206.319 38.7925 199.581 35.4224 cv191.679 31.4786 187.614 26.875 187.614 17.9991 cv187.614 7.23243 193.016 0.0825196 200.975 0.0825196 cv206.724 0.0825196 210.329 4.27393 211.838 4.27393 cv212.478 4.27393 212.942 3.61573 213.523 2.21973 cv214.453 2.21973 li214.744 20.3819 li213.582 20.3819 li210.91 8.6294 206.146 2.46583 200.975 2.46583 cv197.316 2.46583 194.992 5.58887 194.992 10.1919 cv194.992 16.8482 198.071 19.1495 203.646 21.7793 cv208.353 23.9986 212.128 25.4786 214.686 29.5875 cv216.776 32.9571 217.88 37.149 217.88 41.7505 cv217.88 52.4351 211.547 61.0669 203.299 61.0669 cv196.502 61.0669 192.261 56.4634 190.751 56.4634 cv190.17 56.4634 189.59 57.0376 189.008 58.188 cv187.905 58.188 li188.485 39.1207 lif224.502 28.19 mo224.502 26.6285 li227.872 22.8482 230.893 18.4927 233.623 13.8072 cv234.61 14.6299 li234.61 24.3272 li242.685 24.3272 li241.523 28.19 li234.61 28.19 li234.61 50.5435 li234.61 55.23 234.958 57.3668 237.514 57.3668 cv239.258 57.3668 241.057 56.2984 242.278 54.4078 cv243.207 55.314 li241.29 58.9283 238.037 60.983 234.145 60.983 cv231.416 60.983 229.381 59.8326 228.276 58.023 cv227.115 56.0523 227.059 53.1753 227.059 49.147 cv227.059 48.7378 227.059 48.4078 227.059 47.9966 cv227.059 28.19 li224.502 28.19 lif253.255 60.899 mo250.062 60.899 247.621 57.7769 247.621 53.3404 cv247.621 47.9146 251.106 44.7925 258.021 40.8472 cv262.668 38.1348 li262.668 30.7393 li262.668 27.6153 261.796 26.0533 260.053 26.0533 cv257.439 26.0533 254.768 28.272 254.768 31.231 cv254.768 32.2168 255.059 33.4502 255.059 34.9297 cv255.059 38.6285 253.374 41.3404 250.992 41.3404 cv248.841 41.3404 247.563 39.6138 247.563 36.6553 cv247.563 34.19 248.783 31.6421 251.164 29.0943 cv254.768 25.2315 258.542 23.3404 262.61 23.3404 cv269.231 23.3404 270.278 26.875 270.278 34.9297 cv270.278 53.4205 li270.278 55.314 270.451 56.2173 271.44 56.2173 cv272.309 56.2173 273.24 55.6412 274.286 54.4918 cv274.807 56.3814 li272.426 59.0933 269.929 60.4908 267.489 60.4908 cv264.527 60.4908 263.017 58.7642 262.9 55.23 cv258.892 58.7642 255.871 60.899 253.255 60.899 cvcp262.668 40.8472 mo259.997 42.3267 li256.276 44.3804 254.302 47.2574 254.302 50.4634 cv254.302 53.2574 255.522 54.9859 257.323 54.9859 cv259.006 54.9859 260.807 54.0796 262.668 52.107 cv262.668 40.8472 lif278.411 28.19 mo278.411 26.6285 li281.779 22.8482 284.799 18.4927 287.531 13.8072 cv288.517 14.6299 li288.517 24.3272 li296.592 24.3272 li295.432 28.19 li288.517 28.19 li288.517 50.5435 li288.517 55.23 288.866 57.3668 291.422 57.3668 cv293.165 57.3668 294.966 56.2984 296.186 54.4078 cv297.115 55.314 li295.197 58.9283 291.945 60.983 288.055 60.983 cv285.322 60.983 283.289 59.8326 282.186 58.023 cv281.024 56.0523 280.965 53.1753 280.965 49.147 cv280.965 48.7378 280.965 48.4078 280.965 47.9966 cv280.965 28.19 li278.411 28.19 lif309.547 40.6836 mo309.547 48.6548 312.916 53.5054 318.086 53.5054 cv321.513 53.5054 324.244 51.1216 327.323 46.4351 cv328.193 47.9146 li325.407 56.5445 320.99 60.899 315.122 60.899 cv307.164 60.899 301.472 53.0943 301.472 41.9976 cv301.472 31.6421 307.513 23.2588 315.471 23.2588 cv322.502 23.2588 327.264 29.5875 327.727 39.5318 cv309.547 39.5318 li309.547 39.9424 309.547 40.3541 309.547 40.6836 cvcp319.656 36.7374 mo319.656 36.2442 319.711 35.752 319.711 35.3409 cv319.711 29.1763 317.852 25.7247 314.95 25.7247 cv311.579 25.7247 309.547 29.5875 309.489 36.7374 cv319.656 36.7374 lif0 67.4263 mo327.89 67.4263 li@%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (ISU University Relations) (ISU)%%Title: (Wordmark.eps)%%CreationDate: 3/14/05 2:12 PM%AI9_DataStream%Gb!R&k@4"ndP,ubJ9uel,S3Ra"/_o&MUP)tJJ?Ps+eaUqpKm<Ln(Q*HjGo3/+n)nda]]2]Z7Lu);l(ARlckIP_cC^.c&VdeEcXq&%bsg[\==!-k7,oo'pT/SnSf6pJP=^MHMW$P<-)#K+*+:'HG_H[K==++<j[[SkTKSg1-DP1"3mEZ\UWG@ScM$SKDjONbO1gIbITmdd%#5+BG*bMW-nkQ4@:$^VYb"_l4`TP-NJ)4q,i8o.JHiT5*p`TQ2riWV@1B7ngB/L^mk0r!s+SY1P$.m^sl[kUcZ0j\<eB;.J/i@cL%DT9qSUC$]d`o(e,(UTrgm\Kl1caW:ZD`XB;B>)^^ePCb![KkiAIF]`9M^/<ZmKaKD:\AY*-=DGT@QF?NSm^>9,@O!ZA,BWHp:jPo%X*V*2S;jD<'Nq8=PG2!CbUU=+!PHC8S==.O>'`:![jQC;h@+?g>"mArY"#O:+6HIH=7"NNK+.R:Q$tO]S_/:s53]Lg5RF4b*64Fe%-Q)*qomBT;s3mQ9oOA+bj7]]<\gPk1dAT.L7,8Fl(nYapj$5Lbl%+%K3N4g#FNDo(n83PSDA7r3"LEJ3l#h?j'Us&_8NQ[FP?pnQ%HY>E*57$o?K]ZW>r^R!BZ-HtKT`f?4^%s`21kt[0+(l\sn@B:[BboiQR'4j$.<gr7na<aWJ)&_,Ak74Vr'Vb(an,96li98\S6Qth%i9s2>T11%"1_QKX71nFSDt,s@id(IAo2pq6YnkZDU>0?9M04tQXHS;ZHomb7>0/&@_S>RRCZTS=/!n.4F#eW2b@)Dg`2B?NoD#aB%ic@tmmnefh]G)F@,CPGfb0M<JebG!/E(p%`[;\h18EhoM&Un10*"dYZ\7J@\GB$=OM;N8?pk^S"4OKI77/2W!`nsmUA&:DY2JN1n%$cdsn=@X(19V*>ZSDooFO^\V]l'leU'RC*JKoPedONV\jf:Y?1$ce$pfFj`@3bnMMc5?Q#=u\]kL+-0e]/W"P`,@Ur3retH+ib5n%`*,,ar1pYiWJ'8rp5_AZ1k:\2oHV["Ko][`CJhadGbH@[cm.Tc0%qsq=e79M6iOn_3'*H_EHLt6*Ar8&j24Zo7Hkc37r^lQ`D<Rf%UN:]lb*I=.@ZL.IWEZ6.R9!j56c^^Q:g/tV6Cq,5G7#A03pi9n%3_'N6lm;$*G`d1e(3d\oJulDOAjH#e4f%qieFlaOrm<2._!lN%>[Eh&<R-ctUs_H'DOKomqSTdB)Nm*dSRi\^l9$1W1+)O.'cSp01;%YBZsEMTb;/,`IoE>f8j=:cT;]Nh:Gb\YX2!n[b8ZAe'(n3^%M9"k)of)h@,j=tj6LHoYr<NIQUAh#Sfe!*)rh_n4Da$rieDKnr:nZ^rht2\$I],BL\\h3(YOoI)NW+\&ERA#J-7$+2R"rLt>WeU5%^AsHa!l#$J1!_WMNJh9eNh]B<p^T*4Iu.8/:NH4lSqhV#5/h01Xgfcg.?m+Yemo+iiptMQdOIoTi,]D.&kR#gG+L4Getr(NaKTUR%G$Jo\JhJ:VL4;QPU'."qI=]7eOH[9:-RWSWbIn2gIC]1nG_u>E_mrlZfl*[!itL,ZoIPD\r)1aBot=P$k'cRb.Sq*73#.]]6bL7e%BU7YJ4H1M=[2>0AP-uTF:i8dfB8j2c>:$Wg_fj.K^qg(&YX!%;8k8@eX1!_Hl3'^O"f*cX/TA(6*&j]ACn:RE8=2[+XQL2mVpp=)%ZOFHd42u;uF6E-_a+s]63$CS`T0R[^66Q";j6U!g[qT-kRM8P$8k>'4,5,l7C&1Wf9TGIDbTa1:OcXjc<'b,ao""B&06&Th;OJ_%%L_rI]nhb&*.T$i,R03o6$'?niX6;*D#tVfnjW[hCd2mD:/'/X=D7)<h=-Xa\ALiouWo?=]9N7';kZbl:4ATZu_.$B8&%N-p:?Cq8%k:0fgp(=X`*ef`@k;4uXOPeWtWGP4lL1^D-*3,E&"Y-T@>LLEhVff+"T\;\sTIL+Cki6rje>)sSr[(T?iM:=jI(*?-,IL>b-+FR;%Hru$0Xd,hgQmeNK:f6Fd*9@6E]X2U6Q6bbBBL*)=a>h_rYXHN(&+je_U"Yri);lgP&p:G?.=KAZC-Kg=c.K>9.Fr$4/Bs]^"^4hP%iM3b$p.Z^]aEpO%N,cS>/^j?l6rn*GQrQYViIJS$dM^cJ$n(EqY!?UL]8A].d&=r6&<0NPUg]Ks:TgUZMHW+]E3"Olf=S*noWr,Y%Ql9a02]p\]6>O56c^HjoBTgM;=`0Yl4[G6re-Zd#P_W4A-?!\,PK]qN]dN,QD%Ba4g+D"k'+LrlV_+&2,eJbj9@\BP1c0bTbO;fV%=h:9O+YmChc^J!5\QbB!1'ciXKH\>qR;&'m[(Kh7BgK!mG`=o;n;:cL`2rjecaA]TWf9l:.CrQ7PYl.]^`mRL.-8Ko?KMDk$`[B3%42[itNjbk%K_-;)9u]]m0'Rf<RhfndfJPgU[qU2p9[IR)aU9el4WFoZ>@T$1E'*#W3b+%H@P%=S:td0N7,&k@VO9aGWE&E`q'.\m%auq5:'c9q!AW#*_/#6.0b@GIqW,ZC/f=$7=U@u2KJ^$'TMDJB;;^h-P1Q?/ZPH7F<2mkHBP6Ks?A>UqUa^inrWrA/1_0j8%je9//%9Jp]gUJV`I8pg`+3o`8)2=4\MEN'/.`tZiu\M%`5^!;o=LYAJKCG.%)TrKtH:>cefcIHT5BMm<qeCp8S&\HJ)9c.CL,L\YU$#nD+%OO-l\ba;k+b7`USMNMnR[OqAE1*pmZU,<WVT\>X_Xqi4L@ORcl%]/\.\Kb>0pm:&ilT?D;?=Z*p1TKhFSS<3VobKTV0p-dkZlf2n%CEn,DKt`J;>2PLs%Ou&2G+%'I[T0k,b)$fV3b*=s,9=HY!q!Q$`KAAO1/p`1.(?66YHBrpgTnaki4<2X_4[;k0]m-kJ$J.@lL4c?%^*ugV1m76I^#uBS>``NJUabMSW\1"&j`s_g7b'HJq*6M_QXEI>cD@oK\W!o>b:Q<BFArXSr/YOkR'oGk:VAk9SBoCX#F.fbB0k,e%j_#M!+#B,R15@+8ZAtc^O_P7ZLF_ph?@Rb=$(4Fs^8LqOEWB[@CjSaFVA9YuJn7_U*kB9?e+=sP*qHJ@H6HESaulWrLcdc)[4>`b%[2S(NFZia4[FA>\qj*jEF&Z2?p+qg_d`?!V-:f&E>0gAhXQN[OS)Qo&_0X7iXWRMQROgC/mB=5Ia]4JG6+s`mECKg9NfgG,^"#F#%TsZIMWNE>-b*Eb[\+Bf7W"s,N;le7_B2tNXg7)n!)!=ot>N,aVQ;A'V=*<Sh/6RHNS;H8saP)]((F8B$o;G&3)B2,!;Z!pq98]:/%OL:e9]A/=O,+m5JaEgObK&_///^"Q;2bX(kC[_k\j]+ki@QK]V+(gXVjS;b<WWaC&gqd2E-FNItQdM'#=`_c%Ooh=u]%3V0hL]M.%-T""@JQ_S<`NgoHebZ[VHrJT#H4*u+_eb<5moaE`&T*5"]TLWR$)G#/C*J7*;2/Cm@8MCe=>Lf$5-S@+)7`AOrZrg8]u;L;>RIXX%k"`6dSBski!kHl\N6CeB9\L@sO)Sc1BhpO/WiVJ&2H<YtG,_RX<I$6rldX?d3GKD:NiqekdC+jrX3i$%U@f/Q[:@l'f(tQ^$__W2%V,?%e>Z,?S$ApH6lq(IBMGl)rBO0'_ZHf5r,*@'^maYIU;O!("3NHmdqMpZ!>?0:P[J`uEe$ZB)4"fn(BV$m(Pe?%]pr(;2af;s)%S*PFoSY!g7?!_GXfYZhnqH%Pk^aQ7_*;<C#N;B;%IAZp:SlFFMq3ZmdOmhbj,H0E;@Mk9oRQO0SQhkcJF?1;aa61@caQ4(=UIO!D%_RQA_n7DrUI(HYJq=N-A*KBoE\%[IdLphmG-SoW,V0tU7lh8k`enR9Jn+V1b8U^NiCRR,!nm(G"lJ89WMZ*CIXgUO0._h=a=_SLJ%RR*p&Ublu[`pt2M))Oh]hK5DKX=7$H[\F+qW.'*GROZS/Y:<r!hS8-gjc/BVS^Cu@R9EKl)#gSl+,r-k<(cGnQM[@>)-\tVcujZP%(1<son'0SO7#qO^N!XW.53l]0?DpFU"LptF+/.&%```+k,^k9LO0a?4mA]F0E]EpiOF2&G>eXi98U]Hf^&$OifC_Ga*HW<$H@p4P%/QZB92_I,CnJhJ=FibegQS(-,o'mgsEWLZ;6.*I';>6@Qq3>s/T_.d*L%1(^/_<:f%`#X(0)#Bg$bm!u0Hq5ogG,#ZrAIIq!M\(_%=[e]%85n,,BrU?#)T<%0s)Aq"i2'=PJP68U'snbX"tcto##6YL1VYJ.+&QpmB)WmO(`G.D=u7kJ.`]q7OoKkQIg6V%DnRKlYWhl<%IXf![?B89,o#8)oP3N)\<G'U&fBrI]TKe):+oE/Y@JPJ[]^P"/s&JO6V$]fg_)_.eHT_1</3Q---Bl"Y"G?ELh?(KB%fj3_!<9&p%HM'`L6`m9d%7'huLZ*^r$Yd"Do<[%e:"ht6Ne)"('g\*ZHB%_/!=b2^_8W[TVKET,a:eNr'C0m6HAM)3HSBl[_s)N3K_D;q.ViGS%rcb8+*lHuZO9_b73?'$diUjm-E&`TF'67?A$=N3cY1Ee"G.;;Z8E(!RhhN]K-l.Z55AGYV>P@(rNeUS:pqJdH)>_+DJe_h4Il"Dj%7$<#ce'>`.YA(dd^XrD`L&*"rWJou'At.kjrE#"N&+Vrn+EA&HS;9Sg#Ij)Hs1a<:s"W&Jp4JJ`%KF%0o,k<dr4CRLIG0]0_Bm&2%R%s\e&P9bkNp<t,l[IPlgFO0@0,p#^pu7ARUDXo'`HGl`1CELSk<?tI7fPV=>9(G.M4+UMo`&n_]/`lt+lG4N%p6\>\.d.jeuc#]%O;2JRYs.O"leT"]1`F]\#1=eNPU>d3Hh+AK]A!81b["oTB(\Wshj[3cR?,<20r9Mu]0;W?7eK?rh8FtT2s['V-Co"um\DFqf=#Qa%To9g)jV$-E3>DPKRMl0BlS]O.pL6!Cl/M<fUct</lS,NeJ"XD[b<>7k:Ks56)=:#i\3=e+i8J)#-d-Up,%)6j@Uc1'q.r0c\Spf_%=aSTo+&^LgVHZ^O`H:QR[ATWTD_ScuQYFRtK3IqN)b/[2hU0coha9*[7fZd1f7bMoJ%f[,HLl]b_cI<1RusV5Et,&jA2nXG4<FYu%aQ*DiQOk7*1#EoD_?O]>rSH%#1oO3b,rG3K`l@\;lAu;7DIG^J.G0jIT@#>0j6e<<:Ir1G^Y6pMOA)G+Y7I+\F00cm0\5\%g[5sK%R^8I3fjs_,o0-qe\_6G2JL#6gk!-Wl>sOn()e5<%8,m="`jdk*L_i<NF#7U=>Dptg5.DZY<dCdlrdcQ>%OS="1ea6FN$e0`[JFi%%ROMa?ZaN\%*nPM6Q\^P7kJO/k(!p='!A-eeXaU"0j05QZbZ]c/UN('e;djF&3XZ[kUSS]e'UDf;%:RClPcg;R,Lob-Q&$?bRNP`*%+st0/e=7@k`ae-GFmNX"o4'iMb@_hFJQU=Odn!VOe^&QB4_ZQfYKnDjeRqN*!UaQ1&S>aJ!OCZ`/""TH%GP/"jSrE?=JLX6W7OR0%^t\m(pT5D!$tnP`]J3\I0W`^fO!gK\+tq0=N)gmJoce*s;fm3ghr-kLni\"93ald;3j(YDm<AlDB;;`l\p^fU'a.W<#5QV`)524M%>m%Keg'Z=>lKY$KS9q>1/=&bRZAc;uhF+\qBN'$^L1P;U);4[Fd>Z#V$5nY!-d9O\#Ma'<:b-9C;fcA@.Y!ErZehduYY;A/+AkRu%?@NiN@Ds[5>M@TSkmt+(bt0EJ!t/>AYfo'4lV*emiA,#@FiOCB58lUp&T>$[^#'>"b@/*1-"Me=7[("1f$ZTW4(\O8X,KQthJsgX%=tnjocdCg',fph2W]-C=^oXo:g1GgI<XbQ(*]g^AY,j.oUY-9g_4%C.1T*%%72tguCG^@D6%*QKO_+`J[E0i^;u2Z0Wh\YiY1.5X%l^l9L[bB2:GA)d"nTYZn0$uFh_+L=B`2;p5ZB8,`\$Ki'AY(3-WC"OiDg+IJ[+pXjh"_8Tg51NGL[V4kLduKR8Lg[g_^!7p>0XqL%:b$7f"3W:"Wi--6MQ1!uo=liVC=1")\#@-0)4=ou(6.uh+sEYC^#;2HoqbjPEQbp`X=!V=e?a$(WZ[N!29Sp2-$QM:iD.<.`aZ[(%MoZS!a`?h"_F!S3%YQ1[aK,VCbPa>=TiBW&XXq_)jH(KcG,)6PiZ'V_>uk3gS^h@2111/qiagc_egAS:b4N;)"t;V2[Zc)P."E/u%RZ?iGeA/RLc03Xl(T::]<STM;-WRWN,1S-:[u=aR(qrJjZBhYX88k%ol7GsTj=Rrd@ca72n'L`YK6unXB<D)\$$=:MYGtonAY"^D%Y>;4\d*'a,?N.(XbBL8_Jh8NVDIKrR;o=a/0&Z.,ajL6*CU9iTVbV_[pt_Rf_XK&g7YRkRi]cW)7!]9;"eTI8f<O>0YgQRSpLg.j%UFXlTXAkZnWA\P:HeQWUBlid)`)\ViVMF!AG-Pe-mEVO+1WKYkl&BZ;mYt7o3)p`Im6Co)5?:kRUCM$S,Yc4[]$df'(m=.GX>1sk%AO9(mbZPNrXkiH,rbY<AS9*uW<h`o<-0jSmU0_^PlK)'@?>_(Sjc%^4KNV6O?MhkPjNAF^G<%g,7e/E@GgTN88A<k/jNFYl^8r(F%?@dtTl=*>e)K8Bblq6onY!g%k9(^<06GMkZoZOC*^[*0C`bjq+?%m`1"8si"8Cg>HAqln[\jQ=*=.ruE(&DLCkVr63I:u9dN-!ui%<[(j^-/rK:,$njrial.7?=kMCAJU,h2dMj'^9Rh11'Z`D:5t3pG\nCD8A*.r`62hNGDWTR*6mSKZM/E(r,uS=K#[=P0,i;S^5+sS%!Lo`B%-Uj8cWg]WXt;pA?)Zi0cP*QG[+iH.(N86!&+*o)rl;/=j[HL#qTGCjq8pAHU*hlAa74ojdn7)JhBD]`5+diri^\"&-[Gj?%N1heAEo/ia\Ge$+gfDC/-8g6Hnk]2AalPYoI>B,r)"a/d$C1FX:Dc"$;sBk5T7LtW:tV@5NpFU3rr#nCqf,UOK]%r?9qSZaM>VO4%?HD<T?=$3%J`EN12`crbPQN;*ZNpTMj`LRG$@j*RK])Y%,'00B*[f5C+2[%$.=1IR(+(\19`@Vb<Q-3AW+cI^n^r=NL(;Kq3H"$D%,9NLimY(AYH]>4gfoijLIdB`+220k6BC'8blG[SBQFXZ8o^^BoK6Am0q=)YliFESGpDAqJ)JAL4.Qb!ubEV:dJ$rQ7"CJ>CZ@%bg%P1o^KAL<W5ZjQ:,cP\Y5Pu<a0cJI^;0(1V?cL/6PdJ#8#DXRg>St,g-H<<pB"%TiukN%nr*ekoY,SrF(p$>/Gh"1rH\PIkhVMWc8%i[=[.?i>GN[9Li?4+3O0?G2RpVa+bgDW0FH>:apr(,kRPD<JKDfdYgj4S>.clLI[sLE>>`b'GFIA"=r=lq;GY9C83k3o(0MKe,9E%IJW5U[0#UBj]r^=eGg.@jLSpO::J0Nkk<iB?Sq)5&[RfAZVFe4ka(,_),C*"jp7!uhAEM=>qtg?e8r.C?G'?64$>aeWh`SSrC$j1%:WLurdODd]1^a(^I@.[kO,MY)H>u].[E*E]og>XNT\:je6:n/tA>QPsp@\oc`aXSpYuR^jPLn,heY:MdSWA[jXNPDC<[+B(O'AY[%cZUMHoS\!mLS!,^p1O9Rcm_L&g2/k55Q9=R'[8ZJV#.-$Mb[cSq^51-)tQh"[2L8:R;8HMZa"D)h>#:_J@dQ%PS%807>jq:D=@5g%.VIrZHBGhA1T/'MHh1!.).B`9Mq:YM4517:8=e<u4p-+,Y+nK?0$:52iT4:nNV2Ot.E4_+G'^[FkuiAOhpt.7FNT8q,:u)DeIA(4%?DOjG^K]]e<Mt-)CB$/*hWai3.e>O.^,>;bP2;)s=.528hnEo.,)esgcQT1Vmb]ego^])3rVYaNWL^W5RVqTgL0_tt/"bpaL/k.L%bl-Yud(Ih:`9[!NM4)7+e$7bj0=EDn]mi9&RTXcZ_`XGok1*48/=LI[NXP;ojk!S_:1%qRcRh6WWl8/97Ahd]/Xb4)5@ct/l`]j:%-CK[WG5?Y/)Hq;FnQ#]4[8YRa>$emP$GF90Br?gRd$?'N)Ce"MOg's^k3qhaWRF>TDdXKMfDegOmuqY"]jorfI]Q!#@m;8IVoONe%U"QUk=m5G^`_NG,h'8oJfgu2+76ai!9E!O>43c@/F1it1:8W6U*pb_i.$MqDnjj9o6`5I>o[t!U]00RU6O$C)*(R33VMXZ8EgQVt%G:&N"@u-[fN?au"m?()U=eILE.Z]"S,Y`?C.YeH=hAWddW`5n)lgMJ-UpI\h[o(<7.FH5AZW`b;gfqJjaddd(kE\n0o]C?LT#(p&%#'+$A=u,KKG22SW:U':Cgsb_Fn`fOald>9;]QB`k;4fJbIY-=hrNLZ2nQC@rZ[=6A]2)/-VihKf$k,okbI<ChRnh].l-388EG"_t%EOL4;GW1mBf%Kpl)W&19oORR#_eu<0:E(+8U#jc#I,K@G5$btVK=>jYZ$cH--(d6(I/;fMMsm#rPq_nh.uhk+hu:@QZ=V4WK5^;T%c0?aNWgo(u(gDB:_*sD,/Y=qVNCqU`l)n[nr+4b(A%Mp'WmS8&qgpo_@]c4/*cB#jZG]l3N%#b6bG.i.dKZ9Q<6N`(l"MbtBR!_Z%38GCX:SYa1'I[PXbiM1g3Nt)Jj1!WFpTs^fmC.eEj5el';V$Irns3(?.1<V'qO"h^gf9#Beb_U"PYf&.718e1ZT!sd9s<)&n13gg%V`c6e;Ja3k9n\pIs"_iFK)+.+:[n@ciX*?.WZL'(Iu]#DJ-<W.T$ZSGCsa]5FbOk3OoVG%!UriShu$53fg/D]TC^-Qj_I21T=r`1%kqTf8^BeYrjItrNKMh^XaE0MS`U+\2Nq;Z:JsYsI\hhYf(<u0UBMJ--P07X(HH3#?F3V-7\7(AfgMaKkbA17%hg=Q)fs\t?3un_(%@e!\&X+M13L6;,?K6lCDhGrCJ=SQ`4l:hL8m[Z;R?+Jhc5g4@'&dMJSm5TLLh\P3Ir<W(YrLb,lLQkQ$.G#B9_GFbq@aTTr2RrYc%hK"QR'ed=%Md@-iRQm?qhGM2:5Ol]Ka`!4.:)!l%'1P32';!mApjFO9rT2t20E(/=\1Os,eugK)K#`\6LF!%IVR$lJc@;2^8#2sg%?L?P\Gc*X9'AuX/gJ8`Wh[7$7R>tB#EEBbX%NNh4S_EDQHRI_d$?r4r]=^rHId]N(jk<"=3u-7f&3)Mp=@rZ&],,h;GH1HEJfMb'%*NC>qK6M-&m;t+Ej;8,mK$CLfQ<;1CFrEo2Ad.OC9[LXqo?:k81\r`K$^dC'j*[P'Wq,_d@Wu-lf%Q1l9U=_*q=E/L=A%Sc+&A5A%9";=N.8OmP06"eCPNMpgn6=,-Uafp/24hcDE-tpC")'4^#\06\qKV@B9r4[)r;n2aC"M)Um^A2'.U]]<9&DE:$]3U?WR:%o:Z/ai%4+^d8RIN'THRc_=e&kUq)'I*DI(&WQq>k^-!0*7gakMFHPURcnaQ"IsW#nK8Z`69FiRN<`c`)tt;G*]fFl<5""<?CCV;O3TB4g(i%!4QkQ*0*GhDs@Hf6D9&^V%t]s<l:K/mE)\Q3FMWlV8K-F2^ZEGkGl%>\?8hD@rH-W;NYM\_JGa.#"Z[<A>F&lFnc>R`ni)'PG`UN%n=4[8jFc2K@EoIHF/>kA/GVn#<.;jY'Z!)HG<!>ILi:6"B>6ih9uan&Oj"JBE4\;Fm@qb1?rjsIq'3I(0dKmWd-X)o4sn__9N+"5%'S.lLgiiPbo,@h4f!pB"[$.,2boeJ;\a38c!nT#H-sR(0-5,^s9VNt@=UU7L=D#Qk\b.4O!MMMR0d:=BF.Ab,mUFMOVR'WS\X=>t%.Q0I]Q4.h'`4O3..H#>#hKp6L."0Seo8'%qbLq@q7!@"F7GV3cn!VI$]+j+ek/@I5-`Q[eAh]M]31S)rQR!*dA]%^Q(CD2lqK6qB%>[@O_lkCieOMGM2R=SnC/+)iEfRYjd*2t7f&I"D+/s_$S$U6;`fWJtHBXsH\?HQZe]I*P\=^mLM\-8.9cb3jq9_haH1TX7s?F?o,%8W2$:R]\f?QaV.u.pP+Z-&n(u8t*po(bQQI$J,k/`kZf4KXp?F6a_Xml<@?FE\&ELk\*:'3kRU;<JE\<gJ1^lpT@8l04-;cc+\;k%iS1u;]%p/.L8OAcW_ARtV3t(^DT:sFI%2h@EA"GT&FJkdn&0$b]?TGCg>[K9QCstk^69U./KQeC<B`+3>-*+/X8<]&R;C7::>?65%]R4U8H<uarS">tB,O]60GtC].0"!KLcj;!hQ-?C0$VB)6<NT;gGH'9W6qBnuI<n,`S/dX4l`f@HJs'8o8se/$%4>t?BCG1GW&3-\%J4sSklmerM9Mp`$>1kDfk'%"eW;-5m40rEecD<<Qp.R>RD.lU#m7iQL0)PEX1cimCiR0\+k-I96ETBhHAPE9H:)o*$B?p+:l9,(^%A$rGpc!]m_l:gguhUJ9R:2LgjLXXCb--ssOUm6@=F1209Wf:']M=0l%"6E(V2ur2kie[@%*k%>2h*!PKWgBfJ.3<XYXl"H9Q('r/%$1TrMR!YA^ZFS<Vff4J,q3.(&CIk@1k=fZp?6I=.H(@%U,[/9BS6r0])ZemfRc*8N![h@</'aCgSBDc3.>'Rc0hYQqHS-uG3qGBZ%!Ac[h0\f)EgW>nIj_W-BHVT-53LL>86+C-A"\@t8k[a7@00_6+&F1"e-`?=EY+c^aV#:&Z,rDa#jHQ09?U>tQXG):_#UG=A^HitS%E6<L4A:6RB45hRR`I^23E!ad2V>%j2LplI294TF3gECVAEm/tEblN#UMd`Au<ngiGI9Z+\>cbYmAq;]8,21`f9E$W'r3FUoe_n<\%&t6um:m'WdTh2jY'I^"N[$C.q1OoU3bQ5uSek1#u%rR#P`ECeJdm4=$\^>4;Stnt7X%gN*V"92U'h/#mH_A1AQ)7,?aa2YY?Q.M*%/D.h%b=oDY>'ulR0:ad8IOs)#Od!DAcS/F.>FI4Aqfdl2YelcW;]%=<_s7m-adkAr\APq=!!&*AHU!RW+R+%^D1OH_Ro>CWr]UCk%TPc>_A'OCTh>DQBG-!5DbC%Rh`77BKfhNJ;FB+>a<\.BtSW1,-dXWp^:/;<Wru.@e3Ij2+[#`GmQrBQ6KRMe2]$U?=VRdCK4E@a8%B#D<<[`HR=oubtSgS)m\ZX89-_KUYk(0:$sN_dDV![Csq`(jGP-df+YDSN&'s2)dc#t;@oC1#D`dp5"EHQ!eYg&$$k=gE6o=rBA$%F=sa!<JRnfrQTMLiZmbs>X`1LD+#_Z#Q/&C=(p3[aeB!nRsro=EI%6.:(AO9arstK#Tn?),>JT.ahQqsl*lY&;^g>`c3O]+eI<Q>%MhT9*0\Yk)3g<B`a=j%P<=ktAiqfN/8Be;B6)7ni9lTdq.4^8[_H:'2>YDieO,1ER+W:_>ar9ZY!/ZBYD]INS9gkK</rso)f]Cn2%5qH2W*2?]CShS=a/+%TBi5,5"V-1-.:Bn<fmCtd?D`!=O+>bW3QphTHj.+!0MfAdJ&oB8i13/07hM;htq?<g-E?0&DnX0XOaSD)O%aM*#-e\ee/Cou>OF1"[s\?SJ\h1jhR24t3_&@LlqRRJuaE%*idM%d9j@X9u<HAHOHc6S?i[J]U%P$3%^X@+1id9iqc.UaAVUm;%W%OI9:\fX"]*I.aVBeY;4X=%H_HRo7E_5:BquZ&VA:AZ:tq)eN*XC_k?.V3Xt'b;"IkeFNKIM-<[MS4cL&C)MPK[WC$SZb$<<0?Is=%p$pETZ@?SqU<;5U[&$HFT57d$5AjNj^J@nWqc<#_qW[-$lA9$+O;$MXe"5)n+&9-?6ARri:)<ckrk:Pa4,J&:>P7$^O#;KiqRO7s%47eN@c*$nOS<CJOB0iaPL6A8;@2(jO4!TbP8[W)kIJhr*5*OF?LuW&8!7^8-Z=[5O0P7RIN%iP9)uoVdN2_W-]O,`_Oe%SO@qm^$%QU][^$W07G*S?h4''1Ml^%T+2I=/M0A6976-WnmaI7\:T2FTOSHOE"EQ/L[n\/dI[Z_>>$AcY]M)-Y&/ZFFW#',m1o?!baH/pK]L%jNS@L8/A#>l&0)s'E%d.i^Xj/6qk#6OaLq,6/k_>Hk/8lk/0b(a&9^3bZ__e3A-3gaVc_7md,f+n'Dh^;+Dp*M'c>kcDm^-?lI]u%2(a=MeMo3=6CGf'gZt&-Ffq%[.ig=T]N=Efj]'>f]ug0s*&=SXnh/KeYtfW%'&QAe>ccO<E&O"6n]P@ej+sJ8huQt87kL<eP+$\t%RBi#j.PTDC6XlV-)h%W8.d%II-1W*pq(*2)ER-s--#D37G_*d)i78Z'IXCsIT>.<dn()d(cd$R<#;unLd`GmU33$""J@Aa!J%"^-%T\B\/^j@r`Dndnh3kub7\:-Va0X3760(Ig;]^jd5dJHE=)B*[eO,_iFl'4;PGr=X&o7ki\2!QaA:8Oe@iaX;]HKu1PF>&ImN[pO8%hWtj/^+0?[>@HKF4aDR`q3Jk8>-].nc6p("^?Q21>OZ6";e^G`'o%iPXZDrmiI-JqPRI;GHJ_N)PGm:k[E][r=AEi;S<]F?g0MM"%IA2TFE%#-1'"36&^n3Q*\FRY`qA!8<d[oL3*+q:EM`0O/UnZc*/a\Rg`JB/nF-a*O=<ZPL$1U%#9[Of4elglW)qm1U,k72DZG%=_%,hjIRH]_.7YT*?F"u-7H/]k5$Jj;,K<XTD>,[,bj#jT3(FXGLN5uYV4q?m.)@J'dBR`T-Kh[V5U,d9t6rPD4P`m8e77Tg+eL>o=f%Z.8SZbTlLp,K8oiNbp+"Yj_j?71gf#47>ppZAXmM?59ccR.Us-Edu`#Hg0n?r7g.!<r=KIL3lX(8/e"nn8QG&.#l<6itt2iWEUQL%f/)GJkr`(3PsY@*k.9b5,MlueFP@3FYdZD()*G$"21oOecA;(^;qn)VW@;O?_,6r&,I>hJDDR:<4*>dOO5j27a0qh9&$0i19bS@d%1>.M2TpqB;mITXhYs/A)eTl.HZE?#;c;"FE-!T'4D1sJc^H%ejZ^'o6R9ZetTgRkjLe?d9Gr)=;Fs`:Q<(]%W,1C`0EE,u<3DI\<%&m'8#B?*5KC/E0%2(HK9*V7sh;%6^VQt"d=dm<_E-'ptZ;e9D2cQ!;%+LNgc\@2uAes%n$i]aR54O6c]C4:#YO\"l!@*G&&;=-(g%@[J?@0'_[ISte/6/,RDR5V6jZ3W_mZU8S(R8?OoP8bLc&o=j)![b.7k9r<W+)>!MUK84;fbg!Y-IE]t%Ztg(ZE-^iAn0LZQ%]@G1%0MV8]k]O$2S71UZl[3uVl)Nkn["i7RdrXL7o!c-\REt__"m\%B,rs\[#T(*TCJ7o<B*HAp]:h"UI(=c0ICKJ3`:S-o'>:n$A_DVu%F"O]m&d6pm\0V2N/_G-Nm*$1VW3\Wl?7@t"]pMt`i>9786ITSuZ^2'fa*N$E%aH/#M7]HMq^"(coBa\l'Pfhj@'/cC^mIhgQLdd`%kA_;]Buc7?0UA>MLmcVZ8F1AB&ZFU-TLp>0/>91bg51"P0'8'^+Y8Im;ke-rij9c/2\@bje6stjU\4N-21q=)&J9$r/aFZCami46%-[5*oKsPYt3`"7eR;7'^_J6VDQYXSqRpjNV]DUqJ'3[C'6*nJ@ApUm!??8,"ci.J]ZfLR":elU-*JT)NRdX@\(eJ?Y\6KqS>3L2H%FT(#m2SLue`LPA\dHFd"PQ6A`V/7_WNg41EB][ic`=&*N)`\?Ed?^1^SUET,3Sh;f3D*ZXD*AQ>`_!J@j)^)p1VFTpm'UPDV3;Kr%p5-N9U@U3K;f,9V=\SJdCATQ#7UTE37o&XM<(3_KIEN90^=p"#-JNDs;6*KDO`R+4Y-r#3^CKWO3'OglZ:2+tonf*=URZ4Z.B3bk%=CuC..!u0JUh5NeQ8%Xd)*:"&g%!>nB"JiACDo;NRDOl//Sc^-7Q,=&'1lM:=Pkrr[!.\ICjuSPjnL+CYGNu-VCFRNoF>f"`[j$.%%GSmk>orl&IE_PrbJQ.G,sX%oRplHmb42aU`\C%][9I]kXg$i*=rXY*CW?&.ge.;a36M9Rqr'FN7?Fj7h9eY'39$I^G]?/lX`NHA%.p\$?S%O,5EpE2JNGha.6d\TrL"4)KC!?Qg"Qu?bBocQc^*Hpj4:<]%$Q?+`9r_cD'V/GEbGj^AJQc*[3$#$\qUW9rQoV9P?C!%Q%)79ldMf%T-23PVb6nK?QT!V-t?;iF/XH8P9jUJ3NqUX2O:7``PZ;\s1n#r&Q$#!OG/N[99/1leC,)NBoe?Va576+8hmuu;n50_-B%cNRW,>1"niF$V-?c%_EdMk',3PV9UF]ak['ml8kp%SluBSF73`4rnn-mh=kM]G>dbdTRa7mrt5rkrA-Qn*$@NkPZ,>?$32sNN$@:%:Zkkg.dI:?rOD3(CMnL]n;<p8R.tN<>_-L"`;77N$aOG>SLuER5(0TBl-nf6;od(=:6$jGL#X]Q^9a'cQ-[(HT&`n4.r`<$5lJG\%Y!CG4<,JV?iKu8gK\KA$T'aQO#DW=,s(9+`b!jj==&Sp5GN+uE?,;KaU<Dj/,sq't(KKp*"b+^SWX[QZ]=`W6;75AOC*NI4Io3VI%T$.!Y(KDEWWEqcS[4ePg*6Uf)W]"*\N@.U$_*umd2goWDU1sdL0(5E;<#s=m;[m74Mi4SE^l^M,c!OFe\>EHTIG=6[eV7k>0hUgD%/uggOMRR*q_*ul[KBAV;AQ<0F(KKe/O*1\UP8@6&)EDVt7VQj>[E21<`j5F%7FbGS)8.;n(KEOk+J1^<iEboHC.!?+B6Dq>>YZoO%?7CZ]fgXHbUdE,]pnDND.EhR'Wib;5SJ%RZ7Fh,%QG:,3g&utm2gqkH4MDedG\3;;__Rc<aN3_.*O?/9`s>pP3jCam^rGbIQCbeK%>onprC^99L$TC[rnGGC+3SWfc%!Ic0bEK86=bF+QcX$idRlN7UOIZ9=>u<%6HNR,(%aq[(J4/P]GNmcjP-_8E[cX<L7<5haU\#lD%='//A[^aFmQ1Sn50oE_<cZZOeB"?+F4?_FbEjj,UCStf,OE-XsELrchpt#"CV.Z8kU+n[_g4ib(7GHTd1G-%EHFAQCXcg#Wb_ssB%lkS[E([9VM=OcdsCh-jgXksl>l82/[rr!;m:=?Hh(`VbB9P^P=4%RZJmO%iie(m&FHbEA&Fm7Qh:h^Z:]L$qQKB2BaG=<=sZQ5h[%S&P'&R%E[f3SW\$3%*tD%[+0k;)`9eB<R<"'f.7TPI'ZO`Bi4_""in\#h4abQNiP9B\W4/ZPPn_M&ZJ;HFC`8qHp+4gF$WLA$'aP%D.DLsj,oe$]VF8QD0ACXp@`=c\a%B+c?=<%\Dsr9/&>c;Z#U3.MK`^f7G;\BmVGlJS)9gNp2&s\c?=SuhQQ@m2R?eXj\\)pBblG=%GrPStZ\)M!'@BAe2=^Fm=P$dEmVL@Y3ZTHlR3CVg>_ULXbW*Y`Q[h)l=m*Qt]8U`fP?Ko81%&EaD?Cd:Mn,R3OYLa5Yt\hhDr?:9%#8uPs:H88X`jdqhlL-LJS_RoJqi#N]9u,.g1<(+TM#JT.>fj3+9fCj-`jhHd*-]J;lXYsXH\^El)<8mp[],4*N)*bEGKOX>\8h!1%D_f=,1[?uk1%+rjK&:*tla,%=.V!j/m-*Re``G3JE:&U(bM0<\RPDOE]Hk+JnJ1VXIZZA!&-Mq[)<2[/0aATV0'Cs_(E)6o)Z-k"%nQ#"Y?U&&Uim.B0B8i#f5rkjTX6XAV]=a&GSo6f&Hp]np2AtNn8p6ep[W9AI?0egPGrCpB:9BGqVU/q;R^RP!lT,pDk%bd&c5>FY%N@jR00:k>:@VXVS)<7lb>aKRh`f4VSrCt;Aogu9TbSXEeTCs7s^U?VOpi"HhELnoQEcC"1mu7ePeoD!E/\f@D\%7o=ZPhfHBl#M6%I+A.4h<@2%QTf4<@iXsq2N*pYCrSHJ,PCf9>K\hBN=tAl1<*Vn.hN`A(fqsk]B/ZcdPWf"f/t!e`Jj=5.jQ(X(^Fh]aVk,BN,bSX%X`"3mAB)-*"3:gn"g=FNmU0[<!u^,G?IBp+N0Dr(9IJ[r`jdA]g$++])B%T$ST))R`qW/tpt?VG->,aE6,kn+(qSVch+5+W5:L*t%jYag4I^9pP0GYsIr9lD\9m9&bSh[D9N&Y-E>U*aK`:[8>EPJK3EJ=..iV;;AN8$bSD^]+CV=VaYc5=#MIr'DMp`c;qA;k#938VLM%=4uPIDE..bT4NeYoakV_Po[$YF*[d<4+-j+2O,;ceoQ-:/j!<4[U$Q1HZRm!C2UPM26coCE"t@g/^,0Z%X44As4cmZ6Y?9=AV]#P%eo)fq>YWZOS,^g?_q!O]=hjl'G.==\qV=/>m*DuT<PqZ(P5Z^ggaWMWZe=:A)s33e_i8G(J!1ne\XW/UAV[IO0=F>npsRni2jPJe%k(^&Oe*AtT>TL!3XVi)#%QB7.re'QVdtmFOB8<PBfJ\!j^WI$Fo9)"t*A6Bt/C3;dZGT[Q\8:DDrTs$-*8Wp%%X/[Qp=nqQD%shD%AVVpN4o[ropp(aUc"2[bmI5!?4'^#>[u%Ql<Hbke`\s;,Y3(I#M&]h\45;$+E5UAfWih\o3W:9c>Xc$Y>_S/LLTA6^0(7\/LKfdM%UY4U@DRbhK2OPS'D8U0F45<MfD*C%/ah2FD4'^#>hsA!X?/>I;H!0+kmNiq3YHu-saYpF"2jPJe:,_Nss&F6P>o)U8ZGUh!fUl`1%4$$GoknKmG92VZk2in6Hh+-$!8@Z<QLr>s'I=Z>1nSRq,5gM$-^O*Dg6sbYHC8fkCeA?k.I65"@pk*q2Q)e6UOgQ@/m,O/s<:#lJ%3>XBX@Oe8j`giWE@?7\4PCHXnZV*569,E%'ON:2V];'<jqtnenKp?dcT-^(09Hr#4Y6LZN35s-WUPmpCmPNhMJ^'6#?&7=QOm6b3%'2RH<dQd9`-WZQ4\\V)Aoe"CAKetUoamUe8GHF;(bEK^B]EP5.2iE^CSp,mX=_nlpcRfqRQcHpGcc4g69Om*/SZd5_jg**VPE<$+%>lh)V7$i*2-RX9oKX^7ZBQ4RO&d0fngpTVDV%&(!lZU*QNY.)\@.Ln"59]"26pmD2N)$uXEo/'&ag%&R#%q_UK+#$=?R%&i@cOrs%?#94("-=-'N4iQ_ZPr<2>E%6ApucJL'!nJpF@YU"M>7'ugc,>V,h1T8UfI_FZ<_+kL[<Dn*ifi(9O@b\or-$uW%QaTE`/Ii/QS4X%QYT'9S$0Xt:@82''4BCZVGp^T't&t!F/n(qASX2.j2C3*eH<H90m;X8#f\uI^=Y(@W@o7pOZC&D'7p!SCq"#;n'Z#h@nf''G)_gV%o%4iUR(D]2*72*>K#W%,^]LCQRP=0`-Vi^9OQ.T.Qe*jffU:#jY&SUY,G0C[N6<g=*u':*lSA3LG'MWMBt+*0jF@K%_c1GBMV"$0%eQ\CqDg`:s7F8,Y4U\H?WWpRK%rREI<n4or\l\Q38;dqt1q#a?G\)[dfjYs6(O@'tESE!)FnR=QbN"[bho8+kpJm>iCKkOWZqBp4%/M91ea5qHjU1nN1^(<B38qOT0>p3@#0,2p3"81es_A`Kak_/^^([`+2/3j1p4aY1GDX+r4>!..NXn8mqdIQ'lh<`mn@dgMb4rMq8%$$C&22\jfFji,[*l5.ZJ\'Ick8n7+>!"%[0d]s,]M`^6!jJHo?`'L,fZ8#*bZ@#CPi,RX0=HkDMjIA2`AnqmRA%>t2W2ug5`=D@>%FhDJomdEWk\3h*747C#^IcUBkcHBC_Lb38krq_]\Wt6RUO3dg&o6"(UbjM[Q]_/ZBbq_YPff=q%9;E%N_o*=m[QhuLCkX)Yl<C/6%<bhFr<Qd;Kd\0inq,skd=3rVnX[ab>RV$<fiZ&SuIA_JU6nOV8f>\$G>S(b<C3agmD(k@$D!A"%B.B)e2Pucpr>O2V##<RA=mJ`2%nk(`^AUD4FKj%f+BDpuBo"p8.DS$*)eM=pbkJT56W+G;"4PHiIa-j!.Qh3JH267S]4L`XDk;KI:h^9Aoq^J/d"!tUkS\ui=ott,X%[A`i<+'2PMO]o-1SREDS6.WBUR`,,HHert0_/?RDp[21mlIXBf6Eo5YGIHegab=SZ6sPMP3-&G19(St:JID;[>aL(!%;NXa<a7US%d4?X/(X%[nds0'D:ELp_lcqAnZg5mI*1PQ#/rt_?1(>g=j1kg]n(4)2o<7.JW_*ZZ/W8#\[G#qtG&<6EPD6@/?3n7=HC$[sm*EM.%\Rg95M)s(B,N>t1/Mms+"(BgjNJ(D`IV$k,UoS=Hbqkd*n!b,5J+lDJ/kob5h\l;oiUYs,W6@&B8S[D$`'q]2+4k7M[5-"WP&O=3%an?Ah2L#*rDMs:(QS=Be_'f*&S<3Qg^A0H=Kt7@Ykt+gl(/(';[62M-kd*[uZTBg&A03p[jsoJ^WHtVlr$[dV'5f:Ep:HOZ6-,PL%NBCIbKGYeuI\%X?k&m#7n#W'Nm[lW14DfAhB7>mahB$L`hY>Sqj^C7>r>o!sHgT.!Lp%MBhW*Lq@Q3oWEW(19XsB4_05!ND'm=uX%WI1"YrO^O2X82_kWSdILSdY>.C9at35q.o`\@gk;;e@rX<d]7X8S#lJ2/80^]ZeZ6gAb,gh?T3p/)TmCcCgQa5&QDak4!>*1-%pk%4Su=[<uru@dgr7Dd0q6T-c_0JI1VgqmEme4H?9$FRIj6@PPOAr8B^7(n@B3l'U'u>ZJF=].HE1sQU3*,h#0j`:NDfTI_6XCakJMt%C)(,i[fRl]/ssR;d$]!$9oiQKp\IHWTH>aqpCW[4;d=aSS2h"K7;5*c?M<R5*63Ic>5>hcq3bcJr3a`6H+:QsfUupW&`23uofe[b%''Xkr>H43"m!VjYO.sbP.iq0Foa'*#`X+!5<s(qtTa(]QSk6]2p%&t`h[-h6]2iMNp[S""[!T(&E93F'+o[pEkKaA\O."Mmp!Bq+%%l3_@V[uNq_o^=q\YjDML<`(<P]A6P\@aS$]O%T&S`0FO_qZVh;hMWL^'QJ0&%ZqU]k2+#n\5#Qc99"iY=C_Dir6(<$!obWH@2F_%(7oPdJKJT%8;NKmTnD/[S>KdlBNT`R"Ie9pU*D#?<aYP-%43)CD9!_B9T,Eg62jKchb'L`I33hjWpN/9%J[$rRVttK6")Gs:17*4%5?QJLF'6gik%e2bkBce'Q=6X4]D9IkqmDLkN^nZ;rSnbpIb]PS![!6tF70".'kGt+D/XT:o9p53_RuHX:YCJMj6&/S$l5;VmJT`T%iZ$PLno@3i-AJ#9[PO-7eg)2,oWK-UcefHec+UYahG;o7UJ\OWL?]7U],Y-h;E).i_FLOdb8d*A^%lL7^56?V]=d.Dqor6Ak+=UU%pY\o__pn0XO!IB<MI/S'LV.8OCuJI<#)E1OZ'+JbpHmNb*R81Hqu)`LB$8%$T8h+tc_>@M_<*hQk8PW@5GCDBXVnQGbBI87in8dX%+2J`7IZPrOq:qL<Xoa_uUk;;A4HNY.67cBt-U^c"<YXHic^4QGr)SE[3XGj1*oH5KIGB?M4[r9q?d&V?FO>a(lL&TR0/(Z2nFh$-%f8acFSt,]]#<ilDmEfo4)B8MZ$-72akfnO1c<Fr9@;fDABB9#Po.9rk^]s?qmp,LUSY)g_Zh*AXq0?RR/PC;ug3<8WDYQTrj6!`\%%'m:;<oK\GY@lh&e",P]#<VC.k4\NUkmGE3!;OOMcV$mcpBLfuG3Z>1BEeu7\j9YDctRYoQB"o]Zenin#=&MI'0M0q7q>i<PC5uX%q:H>cKN'IZ"jRW:N!:<XpA9%\P!/T7?eK=E"OQ;>2$:F;3ZVpb58&IkaK34B4I7jf\[Vm_:qL?aSukCEI.NaRP6gkaB9:s^b+;cQ%L(V2A?[POk6/N]r10h'>cgmKZ+/3*[G#[d[BR60T2f,E:9hoJ/-M&`faYqk@qp+""#h6Os[Tkn*#Vl[FF^PDl#8QdjXOn;+EnOXq%o%\<$n=[s0&FMaQKn:CoXa$0EhqC0"r-:MGSaVLaa&I"HdZrX)pSiP4m`\<a,hs3oI:Q)f>nI[G<''Tp\W>4WZ*,d/peuInDS)$=%I,=lU"F<j"IQMcF^&Sf'R_cY,lp/bW6faS\17"9YUY!]+6,"</21u)S%u^6e2$dlR5;V(G/L4!GmUQ);gO'Q.VPba1j1Zjj0ia2W%94`fLB]gjhFYq<6d\9m7B$9;*]52OJJ!9"@1$lVB$B=U$g4GZ"re,b`bnY,k1Pl5eC].N(+o%/fPc*suK^Zh\45%^\lT[@\VbmAc%I^km4%eoAkY*^m"St8=rgj,Vc@K_7!)<$H/nND,h68Q'OFW8QUVRYUf&8+%To2ftd1[#X=^/s`*b^IJaV%m0uBHX4l.VcaEIs6RD%!Xa.`kmpYucOtN=G:p1LDmc&"G,HC3q^R0T,mqoLLHg7F0:o3A'#-(a=5dXc(Cs<6:PgbMAZ>!5\sM]q,s(OGKs=/W#ls&@^!ZGN%p[mRJd&7^hC1AC6Z?Q4VI=+hf)i:naDa4(Cb1D^@2g=>FQ,qW"*rXO0p;=??n:G!FKZ4A25kEBTk\Hg'$DYq:IE;Ri+1/bR$h\fs%H(7"[7MN11BD:;Oalrfl#QJ!g+22T4jJh"uc_6kXKs>_aX7'G#$V)PPCeD#b%ROn<7-iZ(-9W9sZ8],d1u1oPLXZDfT8ktl7rc8@%7L?#)b%ZjU56Gq*%2b,q^!uJ+Mh5C8F.YI[mH4Sn=S*1(3kWNR9ZJOMi9DLNYEs.b_9n+,gpq:`?8&b5Lk-;U%rGU/+'6'oC!goO%J=!'Edi/:TRhqMh7moAoJegG<+Fj*(%aMm+Ld]><"`f!UYZs<HHjgnX'a"8[LHkWMS/3*;bW1[NfL^;4%][AT1VQ1B4/]*+5);%'%c@;kTU_n,%(J'+t*&2,Xc_EZ8W'=!cC`J0n`0#@l=!BXckQmI,GV35bq%GFt,X5#fmI:"Ld+I0(5<F1J4A^+ok/ZB'hTY_A.*U!-%S[Y`iZgHMr0M)#+#<Wje8+^)7q#Duk7VZ[E-56`Eb6/>\?5BF9(`H%f+99%.+NO4/@"*TK_2tYlK\QKN^X2oX8V.*kKWqKu;,P+;%_']foR4U`OjER@Cs$NGLcpEI[]Kj+N.4dpBZDVVL9R&"&M1rT,DQ%8SXC/(l++V:WJn_UbR16"`4&f$++5djA4j_"3Q;G;5If]".%]CVnk"Rs'S`$g,?s1AG.[)X)cYF,QrNTa/-hk+ftK2;:Z0d#HY)Z=r%Hh\`[G$fTM7ceYs#Sb05;`O*f?Y2MHi_+'b94f9h=:bJs%)&U1KSn)2E^80M-ra*&/ZSdl@`Qm%6oTsm'^iB;O/GJ\*h9WPpk"k"6m'E<UM;Gi7@*@X8On*flA]PPBI0"]];Idt%pVY%jHp:.:%+Yn5,T3]a&`:s7^-^-$U90tC^)3SVk3!.j03u<T:.O^p<e@j85>-HpDBTKt;m:<*na0#:$`R@>;]c0X6c[I195/<X6003C+o2n,u%#MDU`nKRkTesgsTjf2MjI(h`e#C_aLVd/\K56.2;@32%/c?e1'e*%Bg1%bU*r,W*RjE3;C])GH:DbB%2Qo(eujO_?Am.*cE6q(45%an>u"&7o.t^j^%,RE=OR!39pgjjL\M$,rs);28^A2H#UVWe$JJh%K[odL9gU-5S]i"t!*XJ<"s^4VUA>Ha1=W5[DVqo(CHp^h;8_%q%:%kRDWF571T8?CB`HWr;=_!eJOL.rKT2eE*;.QSpcmY3@S'j'P<ttong:7)llQVgU8=Im2JMeemZeB$GO24]9?S_d^%>aJmTBU%Ii`8dL/td"^b%'#T!HME;`;TP%XR?Fe^8sC,5R8>"8P7Cd\,uhpYgD/lg]E=R^EYYgV5]bJ6R7<_\L3C?7o%g5>n8TkY(LG67=N+%X$5*#0:5(4HqIulb2+`!GMbHKaT[:W17mdmnt/>$U<<5(n-l0U_9#WYFoQD,H+_1O+?FC3E$\6[M[a8Ghs$@MMBD01LVr;k1iq+8%5a?s\<B%P&ad`1qNVN3&U.QhVc1Kohq/,0nr;H4&Zr;jEeIXi]&T$t,o:'\t4F9ED^+=_P6B'@F@<un9E+_-$r95chcGoFKHhAgq%/D[tL!_lW4JL4"?5nZ,S'HU]fbWf4SBn'<J5^usioK3.;X+1=2^CdFBZsj>@+PjfE?6(;]rR1,L![rATjL$;*oVWF1K+IXhSOlOC%,FnP86K!/h"ioaD4?fGqW-$!`o/;Bi5#97?>cr:8%@D<b45euV`T$ePIhC>jc:/nc/@qF3:mheD5Z@u0h=r`;U;d%OcmfimUg%-&%rYH%$BcXuqR3GWFnkE&I;l$#:+%`Bg=),?AZ0!i*48s4\dgM^eh6LX*7"\OQfsmuTF`Dep8;0ep&,UJN'!PO.NBG2Q1&3i$<Vf%5%.ds9BbfIs9,d<!:YH1!8,9W[m@0I?S_>ohs'[P]bFUAcNM[Is*F`tG<W&6k]Guk&>"UXodrD(=o$1BM\88F)-ZIW(rY=/<nQBN/+%-GGjjMX6-Up3P,_-EV/0C).6R>$o;4^i1W*Nc@ZhZZmU.nec#SC!u7@3r;r'f/F:)-[6i^"_b0c0qTcXJ^rqJW&hJ.BMC2`Zi:gK%"\@p"Y*,$'(0a+)8"=k2V&*o>Q,g2+=XuL<HN/!-!'k&>Tl!RWRq9MhIq&ecb<+Mm]8T1b,L?5Q$Eu#HMPk)k0^Ph+qU)]]<ufEJ%=a$3:XpltOD8'44$OHUW8-+r/$dD;a1?4NoI*uLs\Z<r\7kuc2-NRI=X+3daCkKu^EhDf"?h\T3j3o%,+l>:cpoRlHmZHJRE9lJM%q"o.PieL^Im9'X[h7/#<&&l8(T7NnWH%DKM?#F6%Q]E/Hl`FMTOk8t->FF!9YEo\E-=(=+-B[Lt^RlOU??4'aQO$[aK)lu3juQ#)%-$4LuEqa!]Spql8UoQ/k.XAU2m6<#b51IUQY!aofICW9l.b6R_:HNo4ri>WfB^U3sn27KZ?7oS6KKPqiq.o%loNa6/r;"r?5q[Mq%eJe/F9lpSGcnDrhceV?ianoT$X,m.\B&b5t+)Z^,F17>tmm"Oere,a@k"utemJeTMB=$L7Y6eJVPFR2Z&c0SNQ=$TIK4AkLI`n/I%\r]pe>j(cNI!bNNCYDW58+kP--_5%@"Jea&@U!.DKikDH"%`IEO_6`77os[9A9!*pDW)9J])s]e#q9Hbe')f7ZOV$ngc><WFJ.un%%$?^@1EYH%&1aSHT%WpuaB^qT^o-4U3;_=-];j[[3P,N0X1(HT;bALG37%-s+/$4h\=%m[GNG/f+]rS&iGR:!f7(8T#A2WYCK>bV%l*iJACSLZgIE6m7,Kem'UCXk4*V706frr$1p7IgaZ>PN[!'ZHcM#YBA'4%@ar4MO`bGXeK;!?.>8])`iLr"F2%-Gn!q=DF1>O,,#%n],0`8JRRN%`T$d_a!&-NK&]_b"pEYm#agh:@\8eh>YedM#Zh3&@en(I1q'mWT5[MKc?>g+hK4%(?a\s:&UZh-ALXos')Icc[Kro%JGIbhCM*ujfIGqm*m8O<,bSZN.PVERe*M:-mo/(#rI,no08F2SPJX<gqYH;3**&%GZiLdLpSR=:gj47hIU<8%pau$L/FNBK/6N$$%&k3^tO"+ZR7UG>E[W#OQZL,PH*.K<iD>'U.c&ocZE$o+oco?7g)`A?(-bf7QG\ULel%T:>RF%l9Y$^]7Jk>uH-I(>0]*A'/D(pd+%;Zq<m_D"[S@D1-(UMubs]*/!%)%:N!b-m%-cRuD(h](m,G:$;O4$.Hm0?CNh9Y)u0JY_^nA$aTYqt0P1dD\^@J?6[#DTdIRD]^a6%nXH/R1!:Lc[q)g7ZX&G-38+:(1.?j6fmBQlY@^ulf_mp6*2a]A20[Zop(Q0eKbq4[mu!P*i&E*&UPQ<o5NY+q^CEHKg8T2'+N*^S%]?niK/Ut"dO0ai*\Y%hI^6rq]3PEL?4iBr8j\M'sn4\7,$p?ab%XW8Ce0;^[o=7$MjkK[A>?R!PQO%o&BIGY_]2a.Xj7VgRQUjbq%9j>R'`$8^CW.1bWK^N+PTj15=m52$1AttT#"h4a7;X]*db,B1#>)_,HU2Ngr[3dm85P(),+%hksd!AJufe"fsZVSb2Hhi]+=$i0r%:D>"qZ*.J><md[Dgm,rRTbRLrLb,4BWq5mRfl5T-e[oE,ig]?_863h%%rO?HP._<kQgSa1j[rY!]KK&T%?NEFKSNB9l5t[S]jdd-%)A>:2i?ouCOG]^-e>>-V\uTk8*JiDJTX=rXb/o[</#P!Qh+0OjJ)&.i%^LMV&hK%C:S(?2RtL1JEBC%mfq5d1*JNSQM)_oAP,7!P%%Zo"@='&22^JYPgrlTY#k:tei#h]d.*Dh##'Y/E(SW=R0&E.2O"9;54r05&^I1enFg>O-fYFAG*&UW-T7\?'Y:_cIsZMN>I($bJZ%=Z.2aNn)sbAF(GlaLAo:^1"No\ceJ_:D9A2@^5Ti/`kW_*4L"`N#K61;M-bf;WunA]puhs*&56"_H-C%]$egr0!;A(*m;t:CsMoV%BVg^o^jPKcrh*SRlem*FbuDSI)[WWAU7f+Wg-(Gko-8/?\$K^Is!QWXPI<fpF.tma4VG@%q1"E1nTZhO:.1:cpVH70hk&UsHJRH)%*H\,`#JrLEh@3[6ERJ`+g]*]'8'Uk&4e0&]mK9/G!sK2jW]=h%Tt4=7s3^23Ob%87P1)QldnT3WIddK7)^e"1H/d:ON6(Y-]Q^7]%];ipEiG&>kX-*@j.LSR^aM+NIf_\'c]/;8&F([/0o":!B)*T[V"&N"ujJX4)a4D,qbN/:TEH_*g(.V0JH^D2qH$Nli:L^FU*XP>2%1O/!JAn&_N/+Y9"&]NSsS`XVG+C!dL11ZS/e%)Mc$YTCX[A0;TbO6;To"a<Dr*/@q[r<q]SaIWX]npn2Gl2rkYm7L,Z3tji1RYD&%*)u!13h7I!^8ff&#.r]$6=WS/k_@r&rpoW!0AYLF9A&,X=s?CS%0f+WGpu=90/T3W2%K2sf>\@['Y1h=aVF'l_5,DL0iS@^9`C;n%\_oA?m^Xq3ZH7O+>=&%?G[]!\cmug*"=IO0hNgOt<:<C193nh.#<G?YNKEGa2CaO@CJ9+?(@'H_ApXL@n?d[M.l9_.i+tN8Y4T;K%T_KR"BpUl+on+l$1V?BIFWsj%,KCkP$[E)O^:sA?\TXfkBCK@%Rq<Bk-ckCD?.I+G<5>FgrGXVX-c#&=%G[jFq9bK;I!_Tkq%?_]%>Zf4:SdmTheED^>:d#m?@5(p#L.4I,BB>q5ZMes4bm\L0ASKo"F-Y8M<o=2KdeI[]D-D;iPE>SeEH?q`&[/j(N=m)IaJ8]R#;5!m%R$mT8IMk7VP!9bT[cFWI@H+M,#Lr\ASrS$O65&c[[,XlC09ZZ&<"Pa9$k]D(P:6\@#r+$?oAZpfS;l?kB<iJL=]ND2ZXY[,p)e`O%htc<71-&E6BP8f8:@&jcIG@J^]o-Vm5t=Ih>!27Ad4@b<OU"BhKq6TRK1U%8L$XN+KQY+IYE;/Dpd[)T5!<n4a1a?HQ%rlth[NiA%C%N=4fS]]M=D/bjDSt[jNs:]]bpbl:HPg*,c@5Y.LP0#RCST*<$jpElI[b.,qCjS+7k`K),>i,tRi#%HD/b(t?lHf)1(OUkQ#F5O%oFT59kLm-f+H7E?S.Ua@,a-L*0.uZJl'(p:FdBjk5CZMC#G'EF(!-*dh0l!HlkC&7$G!`@F\?&%d2GCe21<$loT1AE"o@jg__EWD%afZ_6hcP&Z9,tN\J))Q'Hl'I3R)A`Ad@"GS[\nn3]C^bWMSHTIj;f\2%"l`fSQI=Omd7<QAT8?u2[MZV7`1W>_Q^+)MDg#9hoDiP%(rfTM?.^8@Sfo4Ni]uLMJ3>DW1([u*FA[9_^WL0:p)D:k%RVMWL4MiB(h/UH.%tA5ht-^Q91nc-$fu9-Oc7dNfP]$c+&lH%>Z[?A%Vn)s\<Y$nCMH/HLrra&ohG1P\+1InZlN:WH#B<[R]rrc-d#/Ggjr!<.314`l?'#$T3pI"lm+l0mH/>lk:E1hrkU6/`_@uhbhr',#%$qP;^Jle"GT)G;K$-^TC.p5T_TNiDoEl&YqPH9*D8!TfU+'b-"oM<).VOMkYpfhRCn[VI,S,`sT8PW(&4_Hh%CiW'5)Pjj+4\oL)%\6B0!fOn\R44jTuc)N5e'pc^]Bt[o!!;o/m\oQ%far'<,CX;>1B=,c!/sh!f'ap"?X%hA!\ebjVH7CpRPP\9-VE::?JA6)oOe^BQ%]2IS*nSTZ'$QRbf@DpX"lsN!#dAFDrU%r=kDthJM3uIYQ:MZAQ0KelaJC+(.RO&e2oL4I9lguh$e*.A(K+WEjZS9YLmKHMioW:SL%ojMLJnA10TUo$S\3kkb>M5Xt[0/T1GOtie\d.CFc?g>1%BR!_jUN?]&jlPh<^JAY2I0WQ/*]gh?_ejmI$N@M\(\DNd>'Of.G%If/%nR`8@?b#G2$K)ZW3D(O%"?@!l0I1+^P^u9?75CigEL?_&\9c9jKU7`dUKg`6$9:lKiStcFb,q@.!n4r1o/ACUX@.]noAidHn:?)0%=T';\op-!%C?Iha);^hfo_Tk%GEKs]2CX#a%aT0(Cb./,ZV%Qn!e33dbk6;4)7n7(BqVuM;N6'mA--Z(<:nch,YMMn*f;Q#B[B]8%5as<JQ>_,i60+_Ok.Z.J(CQ(?S#45`b+gT7H'hia8s<3fgmn^7s&K:N\OAD+BO\Ma_6dEq;o6rMbehHJ]"i9_pZh+Q&=>q1'bRl:%E[kQ<3Rup8qI7XC`:-CBo$YUYHO#[3EWDJ>k*muaS79cNJmir*G?JV8]M\M[N"kouI?^,\8@Q$f:JR7:oM0TfjO,G2VJpcYYSh/%%.s>;\;L/!#0X:pbG%$&:]4]i.Wftms4ri^Wkc-hoB/EgXHLO2,*D'Y$oc8HEfE14]s$\0MPh<2<aDUjBeVBoJC&Fuh=?*G&Po8G$%H0O'kgjXghPhHk+nmJKa4#P^?[k7bDkA>f_hKcqeG<Vk#/XW0>\C'-PN4Ck"<E5640LY:q'V8G<k`>'LkXnPn\3?7tH?Y\@QC[Hh%P.b!cTM[\Uf'_njeaa/Zo_3hQiSab^Zsg=G`n,!DN\B'(Y6@3nDENr]^3+a>M##DNRb3<,BeOV[\:(pLEGV)JR8r8!qR<M\"qY(N%/3X.(2u%M,-&cDV;+l.Eo[F9pQe,)Rh(N8E[)`#WJP)2>CWH<(JqT':^CS8n+"\:!bB\S'+K[)Q%(uW:iILd,B`H=4[YlCFPA]!/%mP<gDZe-nWqnJ-YEY-uZ)OX!;V0p*DM-q[3Vp,-T7+JLOCiU(>].&H.-`K!5cWHC0?EF9uN0J'8QIY#T5F.$_g4h=d6JG`\0@`*;%1hmH@I^X""o,Go*9O8Kn\L+q#%.V$NYmcqRQ_QP>0kjZR(U%3i"_o]4/Cr(?s7.<b#i0br6KQ<FbAn\+?UQj%m#:8c_&HN6fB6k\%W[@g<_$8*/!r2F[!.Zg$ZN,H&&qC[2ZMZ8(?_7Hd[a+9c!XS_t,QO"7DKcl3Y>5581`>&S!.K>/!([t(ZN,H&&cg:GrE0-84pf$d%F`8,3Y>558Pq1Uq!!9nu#ls_=CsN1Xogo.N\nHF+5iB+!!Pn'VT*=`MP5nuAG%Ui+")O0^DgM`iqYR<65d4Fi2#goS-XSt:@"\:T%;@9kc#lkpgs&Y8D=Z?F)Yds[]4K(k5!Ph+2C,-ffL6Hcr6S(NQ!4>P>I@n7Z0]X;)J21Sp4XG&QkZ+6CT?a&fO7%.aB/HD8+]O'N%4)2P]?#88q7B[%o/T6t,-,Wss,t/&b00tZ;q,,Z4fg0PW[&\jS]ISp&6t$STD$Dl/9.^hPa@f<b[CEBH/l7#M-9E-eQ#ofsb_Z.C%PI\9lJVr@f'Z%7C3sb3(BOdAV@uLL3V(g^%N6@!J"5:GQ<qi="QkjjdT.c>"^`:\\KXb8n2&6XdCpO*t1'7(QkL)Qb;<aB__J"->%NXI"A=$jLXJdY=983Yr-H<t/hj9rY7<qZ.RG>6`taXLlUm`J`W^prTKO<D2)')6idf[m1MCs:4$Zk3lq?3EW33O1l#kBfATgP*[2%5_9mar@edIMPCG:DHiadhIU:K/I0GonYi*&E;"'DFrCQP-.EZXS\uJEb;XB9gcOBE0U`uRG0%T?QRBjFTcCO_oT9[1ViRL!WcRt:%',7I#h&_CQc$/m,,,4O(:eccE9WE%3&iA?&Tsj%tfklgp1*.@%l><7>k5DEf1r&ScL_MS(4-"&FrTO8$]@&r6k:HL:(q-fVA1k&%%8h05]I#JeLn(Dln2_<P[Bhr!8>Q0\7Ij*A`:V'[]62iV,(]tl!L<E(:]32n\3-9H'%tr%UheUM`ULATAO#r%aO&s<4o=R0HVKLdi%DVFI[E0tjJ%?LE(_=e?]^:P5k!<4,?%3N&3liR'uF>3n*r9s.tpi6CbHpQ/ph,3p3qtZLs\+$M(([0Fh/AXj4>V[4XEEp^NJ?jDZ%&l#Z.('u@OZ'[VAAAZ`-Jl?I8>eZ*Q^$hCW1H.q@h_$f,O"h7@^Khi&L3\f'F)`fPAU.ri/W#/6GWbCH\i>]ZF0T8mU5ZfXMqD]:%.DbIH$is<7QuFf!;r;:UDi&EWJch5&5X?[3,Y8"M`=CB1-Hm_[$$X[kQGjKqGa.6mHaSe?`u10frC*,f`6C`7iC"jsD/lg7'2S+4%$%Tel*k<Q"Xd'<9/-A/VQuFS`oYEt`E$V$j[b5VY8Iu^_!-&.RM#gY%GRY#>d27g$#/.gRBM/?6BJ_?T7a&T-i?N.?6!)3:Ll"MN%:>TO73(M=,@H12d<1JlF;[#mp7I%NRGaL[L[4"u9.M<1\3GBrkRNmr64@plaJQ?9nVF6.QTpNrA6nAurD(0%43#YT2#eH0=:.6u?%FGkD(J4@'tVj8Ib!NBlZWi<tWJK""gR#5Q$%N&aP0T5NK2iVkhTZ;>Di'#()R\>Cmo1=Q/A1Yl<9404eW(c*DAMP8@[:OlC"?(sD%iA<r=@$$nZiSn=o0Fo/d`]mp(O;e:=)%0@`8J#8Rd25@XP@X2T4<0D-j-7nm+F4#[>K4T@10m.f#rZNu7,GkV8=1PC__X3BL_G1*%O]Y!t;GDuNB[3H?n^&$fB;N%M=e#pK@@kQ05k(!k,;?a*;&4[Z$=Eq/Lg_NJD'b_I"K*mrONRefFYF^@"`!$19O(X'YU#rj>b+l3%R>-!O151"HKMAaD%J0'3-BdnpQ?gt(9p`+RL/Q2/k(0Eb/tlhtp`mnB1!.Y7P\?FS.?b(066Bj%A2Rp*/`DM9F`_3c<#1#t,7M^@%Xn]mKNgJl7Mm._kCP4;U!(Wt5%MP7h",8[4NWi9Da_=5CQDd\`.0GD7F?n3LQH<[:1bKHF$@uI1FK&Y_CXJ8X9?:dHrm;M']Rj<@%(:PcVfa!CDEAjPW@0n%9j8+p`SCN55,rqVQ-E4*MSAN<g"'/#>ZllC016(d#b9Z&17/E"L:8`Z:g.arCC6:iW.M\<ba[?NT&j\-?%FbiGS!22C!Q@YP.:$dmjk".65W[o>kBIshtM$>c0JO3;2Fr>jV#,f_?9SOc)M1oFjMJn_:8<9F$P#7g&"XXXJ8f0)Z(6(#$FeCNU%,uN(tRm]N08!40!3rugGH0Cd&>p9oVAN]0;-E<(f_?*O)0i]Ad=B&'&<l5SQ'PFtPY"gO9jE1XR6nG@WMcuq9!*!;^_Qakf$=:MO%MT:hdTSSL-fgX7m9!G<leeUY_'M>2-"Y\L\fF0,F9.Y>nk*623&<WCA,>!J\Y]u<CQHBiE/]k@"E#_1Ip%SfT03B!d'9N\n?maYY%\Ni_!Ye*G)9r'V1n/S33AtUtgL1Gnf0H;J\:un^r3RNM_7,],n9][6g)<DjGEHuF9#h6C^Mq!"P.ZogqQ=3!4ZoN@P=H2E5]qf3)%C!2%8j)KrZ4pc$EJVV$-P(g_@USNQORCK75@*87HQqJbSb=,O;?blZ+XF!oXC^f2'i_)i78F/Th0*673Z`7&anF-Z)d>XM!`Q'6H%'T&9DdhEu!:a9s`AAuC/Q)l*#H>3bR&i!5Q9p`#AOIr\/70?Ie!m$Bj@fukD%%p76'ZVr8n"NZb)3<2V%4A[pnIe>%KTSVP3+,!W%>b-Nf6"Y^E(a_^)"2c:J81(,f/oE3@]c/1C,5>%u5ro8uScHRqKL.P(OqPZO86Jeg#'@p@EEs/[Ik^ps=!BALgq6+MnRuiU[3Yu6%b!n4F#\ag\Ar0O-e#A*m0bf?sOH_KXa;gma.ZL*[8MYD?k\rttg/5nmAn;Sl%G1S!]]ZpX!dZ?=+9;MI$1R/?]tre5EKX;ETFo]O%M1ha4,RLS!q&#Mt.Z2c>36VrX#>gje"p9Ym*J#g4P#k2u8F/!qjE:/E_A/,$=`#`.;HZhpTYn,^UZ`OG%L:%si'7s3pdA"-a.Osf%8l@G_:dWtgD+Qk,-$9De!YeOse&oEn!gRG([2_"LWr,f<2"FEoPD5nj0!dCO'T_R%[T]KL\mu6G8a,O/.$tJN?E;hsLB\nI))#N+%5qN,Giu'U;9c<-tUd.0pfRdp;5Q>O.@=StC_BQs/IlrXT(seisSV6`6LJ]-LJNbCr&7pmi;N-V*j>Bo1-sAonZ!^uRcp;&iR6]Rs%[%sE)fEak\+P'D'7<.!+.5MgkU0&1@iX(#b*dg1p;#j8KHmGk\jBT8OM/s5/-E4I=_+Fa=N*[ec+sITA5[Z=bN<L+U6>//E2)HL$%_#oug8V>)L)'tX5W)Y;tC<BLC>Z2tJ(U76Z>07!q8g\%/$^ZqXoDdB]/N\+r2t.4;+(cb5?<HFcA*FDdeV.i_(6YdR;3V&%bE.\D%pVSJ(2gK")X!m'nkOaC$(5og]]pf'YCVCuQbUXA$fNu&%5HeMX=l/%mq/6.#4Fs:kEnQ=H]GTnU,pm_Z5nWOJ..1o.5`FW<D5eEt%#7<@V40qdn)KhGP\&0BKMfPbDmU3mL5q!*(0JZ0El3N@qM$`d2JeM#&.&ec."7]IjQLJtcDHX/05dKM`i<VKb"793IeL'F1*W/CN%S0+4P)hL(BN/;\e;6nnQ(>0jBa#\l`3(2BLk2JpI<)q*D_KuAqQDo(8U++l-ag)X59uCiY@pGRmR"X:P7+l'=*XV)X;+s0<WfF_\%#t/%Xjt&p)218=U)c`/g*i`X>_u8!C1Mj;s]W!/9313a,ERJ+A>78%SqOH0'9("^(Bh7Hu[ttJCJc:;Paf6l;\;@u[@t!I?EYUrr%ETHXJKVZ1)R?U'LHfTYH\V!=_Bm;X]k9MgMUsMSdkbc:]>mc8H(-2l/ndZ`F6R3s`JD+Vk8aIKC/5(OF%cj2tDejE21lsU4kD6cM%$bJE8?dROXQPR'@+M%eNSXtX:HGp%"#YmSgOJ-,f$<@]`7Z2/Cg_;#e8!\,8OX1DlDs4Fe%IN93&(qB8)qm.IW&hVZE)pc"cpKlI%^rq*5=agq'4G#HJ%:mK>&IEZT>\>MB.`LC[.7fraH%1ShDIJoP$\p1?i6/e>JJe`#p>!MN`ZpKU]E4KN;'ZY6&m\]77'&<S@%2`R%!S%$S&9%^O2(lkP'kS@n&/#:Mp.\4E.?(%b>a24Pe/"?@<Q0k"7Sp`MkG<Wc;<%bA+,jfq't5UP-Pp]o'*;ih<]uk2CF2!@p^`.5%[ut*>gCK%6OOTC+37pDKH+?Vl)^sr9^X,S\XlX2jHC7iBZuASm0%dVQOYt.-$en]CjKM/I?P"LVp^F^i/t)!<)DU%r"N)tMU((70%o5J?phSPc&p-o-UNWMl9,AH^;k:@il&@XB&TBSQ50)dJ$iE4)C'Bkq"3?.7)7p*)TH(-kC/(S=SB".qW@s8Ot&@1SR@&=QJ_XgWn%np.#Y0:G,pk!Vgsma_E._\7>^K].k?EkR1RE@SiPoSi<s=H;)1+!Pcl.oKmFhVp0?ZEBW!KA62;[O_p@`PW=UjV]6[DXmuZ-S*fT%2EqQ:4?J1:aDm,m8^nk+P:8nn,WR/LEe(R"[4d5/Eg(oB@UKa)CQtkS@P^F7(%\H2fI4;:[@4E&:t%+6I^jIG3SKpZ=lE"iHeAb+%R@WZD8LBs/Y_A9bJ9W*U("g6QXhkG%6cZb/EkXNKqZmM'R:GuE$(raQF_^KQ<3X)/j^uXRH<s^u?)>^Inc`R[i)TJi#cc.>P_V_n%>6BN`8+gVM9_7R5<53\_fgZ9r'.W]-ltda8l#efkZ2as^0MDMFL+*DeSWj2D46nfg%>IWB9B%sJba=7)N_'^\CG,AGH4P!W,O5"@%Q7!W?$]%nTdY-n$DljUE-sbY2j;p'j_3-eML17g6=;:7UaIql2iMR?=]E]bFKqVVb@]ofQC`q6jeS.RW`E9Am!(7l9h-s.o(hr?]%@u0l$m&7C.O2.f`4W>QqJWK8<!#%jmXn0a^Jt^*ZT%P$6"edK[J@"O1_p7-*=53`A$(P:MY_et#\9SK\6n!NCY@HbKIr3/a\cG?K%N_(Na<1L!)(/a[rbD.R=,[!H2TM`n9PR+iDO*?bP]WI>M]2:>?!KW7-#noZn!d(ogb1FXrKSiq.>[M;i`g*Am51:l=dmbB]>Lk9j%NIpEqeg-2(U?6Q`a&Wu*U`WoG1A1gM*58K532ANY'A8<GI:*tXj<DcH$9o0U6ElRl`:Iq>#8&>cMK'f/P,ffN5ZUgoKl'GbFq?22%SKHi.h'`i-JPBF\[7u-hZX6Ub!j>$X_o0!Gl<]QM=H$T+#)"&nJTGLA_#,C$WjW$MCh7??>00$hJ7]Or$5X;B?nQ#'_FZae/e+U;%ZTKip.e?pR],?A&,-!+/9S2Z!RR8_R6#c27ZmV>;p4;9&&l0b-s#f_sYQ7=En4kp@MBF6UCnV\d$#_glE12&B\OB;d;PNTe>eOU6%gM;$9jPAPc^cR18O`06pHZd@$dbGm`1#JV83M:D:g!<K[MMjKXH_QT(;08bW!mR4EN+.:r9+X>Mde])fe9!ueW[JX=[2G:^.,gDC%A8QoYU4=B)[S\!rLcdVhDiEmM_2/W7'<7Vk\ar3Vk0CYBcae;;K2kRsHht\S#hdX7(qUc$[W5i4FXT#ODXuhY_o>^]:o<@RL_ko8%PU%>Eb0E[5ZQ!q>Pr=(Fe9/0o`?:OBeandDmBIH-8(?MX(4[E016@KXZl&'MhP*W1+\Un5@g<,-Jr<#@d##i?BXhN+aC1%SeoQ_*%QQ=jK,TefY/m,5Q2?e6D"(:;bGGjR.,upa^BY/5(&.%!4D7Dpl:T8^27DX=8S,hhC4/2MXTs!1+*f<"CZjr:HSRse`I1euC9_>)*%T,.$bV8Tp5N=8s:K(aqQ*HuPqfT%'fkF=B/K5*_+TRO?MD/!]E'K66U5g[\-H%"bUCS=pbcutRp6hl_Q3a+@S*8$P%YGVF,2c/>$%qM#$#FV*op>]!&F'WO(XFW>WNP%-dU$G%ujf*>VdAL]SFb7<!.Z0)pC\Kpg(9(ptu'qljCgjFq&HW:nT9#HGt!*Yu&ap\g%788Ve%!ul=Ob@-RNAXp8#(r'IW_S)_*?Y?5gIQ?c50>("g7lHg$@p$!:i`?X>ns85W?20"G1Q-A6b:kYhL2H;oWO4),GN?5qJ+fbj*(&&o%h]ioDO[o,?[)dcI7NnjFmD(-(lOU!9_W%=Jc@FpuS)h!"CgKcIKN\pE,_?E/A\_erRkE"j\FS^BJ5e(aoeg4A&8rUo-_8X[&=kC`%#&pmb]Vt$C34A4Y_pm#p]oLdPkXnFmC_C9YGamLcIV*>Fg#P.51hsJ+hmBVf>6.pIG*V1AE$BASjua[`[<?YQ&a%S1,;"q,a>'?h%[+H7bhdXLS`8suBK^.,(d?;,iQbCN)?0\Co2Td`.:qPel@HZ=-4lk)<+Kg67s2e]in5*s26.6(I5A0UCO&QQS(J(>)@"TTX#WoFJ%@`\P=4LQsIL<sr!;#=p/M-VX\II85=CgWU83UBEZ&RrnChnNFQj!$$l!K3m@Z&PXRR1)IKKT^dE-G?qpE@]ZY^8i7jlUAi#]*01`%9`K_bkmT%Tda+@ZBCLrk>deEXB1caUjtlB@Mq^N_,$g>P6!hBBee<u.U#=]aG$>.ITKapahA5'LRZF4iL%6,Xii&PgjRKCgAQ":E%UCu:O\gE$(6J+-uK2qp,(rCiWZS$07CAXA4).+!5<BG"N+t@]c]`Kh[R!OZGdNHL%^k?i-#t'kD`lNED-;d9X-/K,=%6%*!eL]]C%jWY4&YeI!R:`He]eW1\H;Ug03K4mDLir/AA`$Jr]$KB`LKf@3IE;p<E@aJ"W=^c>\2e&T.m!AjYd8CoF<\KhZR5m,KZS*'"QRlFW%+=CLn)Af+W%nm1EPSaMg%kt\bU.97Qj_Kp4@VKTF"d96$^1]!4&@`sSal1">#Sp&&du9ForGY3A"BuNsIRZJ"/@fmabGL:6>7(U:%=79_F>0dq]*#[l!ib+;d<Mm-&9'gdA*13ac@pLKV;k0[OYWOpc\.fl.\QZ"*)OZZF,-eG$O@NW[fRh#fk9>l9#?A=!r/Ch`G7lon%(auNG@(05*0)R]0d<'N`89";NO%mk?DCe>>[TL![:P!W2SKGqTRimM$.5UBj]+ku179`tf%L2SS_\//VQMhs\:ce)J>UI/Ik+@&*%95JZ`j,,Gf$Y8fU9O$d4d&SS7DaZLrbX3+e&:TJOhR]i\@B-<#!udU1MDl%sYHIe3,n`7ek&I'K<BaZFCfG/gdXB>2fYm7\5UgA#%WnE@E0-^Z:)3lXtTZj$9]f9BA,nJ]b_!:<]"opt-((M>2[C]?V%1X_AcXkV+9jJ;G=s!#jIh",JaYAL$ILGem3%^nu;\#o`:<P&f%l-bTX;&Ys+1+C+kULY4+pR%uKi(+RA5`tM904Yc=0$i[5MuqsDFiG_<S;B<Nj5jaYOAXY&>;&;I3Wp]uEC*,\T.K$_(,?:Q+i@_]%a?XA=42?l<JJGBufEiF5G"9V-lj+I=;B_gn#:&;F9;K@85_V'9".RB/QSSc(Zur>ke1hq`F:<pV*M]i/FpuhS*---0_mYTA:'t_=%>GAq$C>^chUO[;-o<;)*n#IrZV3'Yt/S#^*KabVM\)L4\*'pYd4+;+KgI_ZFV4sc01^\'mnp,Dm..j7VC846pf5g)16]R=L0W/G@%CcNU\ihK5F5Z,!U9JIsu<GO2MSM<ZhB/M,jjn<#OgASfBrOO7EbJ:/\.TfRQ(,sp*[mc2&qt^bo8Jr/&n<8jo7tF7*J@n=.6@$\b%ncrK+e[<[N[UocBb.bNGMo?Gkbn/#Djr%bc:VPH8BJ/FAA2M@l:<Xpj"\E\g&(_Ohn1jB>(>n3Q1G2oT@0\7,Md&?*^4Q0BB@m]>%Jr!u>Me5ue"rlr7aHI16D;B(DlB3`&bemDf+3e8$%4C)(R"tLXdHZR6ptujtl_9e@MYVjbH#koDfVjb0P[2MNQT53coB-%?i/W*H%Ff@6%bVR%DT#W\M)7!bD7s<,2Qp6BC[cCn("dL[<k(nr[pq=M-_]j!"CbcS$W#1=A0RI>e166Vh6U)/$%_>:*E5ck":bnAIbHi+]%Q1ip$EMLIfa]Aul#/Z:DVYT`(e9?SPk6'EJ)cHZf@7P$O.,Ri"^h587Mm[1UEm:A%eVp,aU@)tiTtQ]55"oFYAt<#Yk&:.4\5@=6%@i?n'XN63,3e"ECF:\3)_:nVLdj<8(9trE0Q[nc;3cl;e]<9E?.j$tUGR><;*o#>-%!W@#F0arN0$8.4n=cMY,jC91cjZ$OSc_:O%&AS+>7&dpqG2'a8gD-ckche(_/,MQ&+4p(8f0:'Z5MH^qYLlo<-+IVq%W\.@<<DgIh;@YWhp)&e^;']gho4#nqu^l#96lR+,&dDI%QQL_Rp#ht(h+,"-n%Zmb+^e(HcNns@)7ME*^BoF?D<,l%bV&+l:H#+P&:<]SYP;T1\%h.aA9dkG5P^'JIe_mic'r'(I/<X(QOj,l%mGjPF:L??apZ)4-hgb\(kD)8drZV='rmR3p?iU'%jl?<kIt.G>&:%dsJ+MgYc[WY*5Q,d<kP~>%AI9_PrivateDataEnd